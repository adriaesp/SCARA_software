
v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000006a0  00000734  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800120  00800120  00000754  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d84  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3c  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065f  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000279c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a9  00000000  00000000  000028fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e1  00000000  00000000  00002ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_3>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 ea       	ldi	r30, 0xA0	; 160
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 32       	cpi	r26, 0x20	; 32
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e2       	ldi	r26, 0x20	; 32
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a7 32       	cpi	r26, 0x27	; 39
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 dd 01 	call	0x3ba	; 0x3ba <main>
  ea:	0c 94 4e 03 	jmp	0x69c	; 0x69c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <int0_init>:
#include "hardware_config.h"



void int0_init(void) {
	DDRD &= ~(1 << FC_Z);
  f2:	8a b1       	in	r24, 0x0a	; 10
  f4:	87 7f       	andi	r24, 0xF7	; 247
  f6:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << FC_Z);
  f8:	8b b1       	in	r24, 0x0b	; 11
  fa:	87 7f       	andi	r24, 0xF7	; 247
  fc:	8b b9       	out	0x0b, r24	; 11
	EICRA |= (1 << ISC00);
  fe:	e9 e6       	ldi	r30, 0x69	; 105
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	81 60       	ori	r24, 0x01	; 1
 106:	80 83       	st	Z, r24
	EICRA &= ~(1 << ISC01);
 108:	80 81       	ld	r24, Z
 10a:	8d 7f       	andi	r24, 0xFD	; 253
 10c:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
 10e:	8d b3       	in	r24, 0x1d	; 29
 110:	81 60       	ori	r24, 0x01	; 1
 112:	8d bb       	out	0x1d, r24	; 29
 114:	08 95       	ret

00000116 <setup_driver>:
}

void setup_driver(void) {
	DDRB |= (1 << DIR) | (1 << STEP) | (1 << EN);  // PB0, PB1 i PB2 com a sortides 
 116:	84 b1       	in	r24, 0x04	; 4
 118:	87 60       	ori	r24, 0x07	; 7
 11a:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << FC_Z);	// PB3 com a entrada
 11c:	84 b1       	in	r24, 0x04	; 4
 11e:	87 7f       	andi	r24, 0xF7	; 247
 120:	84 b9       	out	0x04, r24	; 4

	PORTB |= (1 << DIR) | (1<<FC_Z);		// Direcció CCW; Resist Pull Up PINB3
 122:	85 b1       	in	r24, 0x05	; 5
 124:	89 60       	ori	r24, 0x09	; 9
 126:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << EN);					// Enable LOW
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	8b 7f       	andi	r24, 0xFB	; 251
 12c:	85 b9       	out	0x05, r24	; 5

	DDRC |= (1 << MS2) | (1 << MS1);		// PC5 i PC4 com a sortides 
 12e:	87 b1       	in	r24, 0x07	; 7
 130:	80 63       	ori	r24, 0x30	; 48
 132:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~((1 << MS2) | (1 << MS1));	// 00: 1/8 -> microstepping
 134:	88 b1       	in	r24, 0x08	; 8
 136:	8f 7c       	andi	r24, 0xCF	; 207
 138:	88 b9       	out	0x08, r24	; 8

	TCCR1A = (1 << COM1A1) | (1 << WGM11);
 13a:	82 e8       	ldi	r24, 0x82	; 130
 13c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	// Clear OC1A on compare match, set at BOTTOM
	// WGM11 = 1 alta res
	
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
 140:	8a e1       	ldi	r24, 0x1A	; 26
 142:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	// Prescaler 8
	
	TIMSK1 |= (1 << OCIE1A);
 146:	ef e6       	ldi	r30, 0x6F	; 111
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	80 83       	st	Z, r24
	// INT output compare match ENABLE
	
	PCMSK0 |= (1 << PCINT3);
 150:	eb e6       	ldi	r30, 0x6B	; 107
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	88 60       	ori	r24, 0x08	; 8
 158:	80 83       	st	Z, r24
	// Habilita interrupció per PB3 (PCINT3)
    PCICR |= (1 << PCIE0);
 15a:	e8 e6       	ldi	r30, 0x68	; 104
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	81 60       	ori	r24, 0x01	; 1
 162:	80 83       	st	Z, r24
	// Habilita interrupció per port B (PCIE0)
		
	ICR1 = 1999;  // Fq: 1Khz 
 164:	8f ec       	ldi	r24, 0xCF	; 207
 166:	97 e0       	ldi	r25, 0x07	; 7
 168:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 16c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = 999;  // Dty: 50%
 170:	87 ee       	ldi	r24, 0xE7	; 231
 172:	93 e0       	ldi	r25, 0x03	; 3
 174:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 178:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	sei();
 17c:	78 94       	sei
 17e:	08 95       	ret

00000180 <calcula_pasos>:
volatile int step_count = 0;
volatile int mov_index = 0;
volatile uint8_t MOV = 0;

int calcula_pasos(float graus) {
	return (int)(1600.0 * (graus / 360.0));
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	44 eb       	ldi	r20, 0xB4	; 180
 186:	53 e4       	ldi	r21, 0x43	; 67
 188:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__divsf3>
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	48 ec       	ldi	r20, 0xC8	; 200
 192:	54 e4       	ldi	r21, 0x44	; 68
 194:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__mulsf3>
 198:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__fixsfsi>
}
 19c:	cb 01       	movw	r24, r22
 19e:	08 95       	ret

000001a0 <calcula_passos_moviments>:

void calcula_passos_moviments(void) {
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
	for (int i = 0; i < max_moves; i++) {
 1a8:	00 e0       	ldi	r16, 0x00	; 0
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	13 c0       	rjmp	.+38     	; 0x1d4 <calcula_passos_moviments+0x34>
		movs[i].passos = calcula_pasos(movs[i].graus);
 1ae:	e8 01       	movw	r28, r16
 1b0:	cc 0f       	add	r28, r28
 1b2:	dd 1f       	adc	r29, r29
 1b4:	cc 0f       	add	r28, r28
 1b6:	dd 1f       	adc	r29, r29
 1b8:	cc 0f       	add	r28, r28
 1ba:	dd 1f       	adc	r29, r29
 1bc:	c0 50       	subi	r28, 0x00	; 0
 1be:	df 4f       	sbci	r29, 0xFF	; 255
 1c0:	68 81       	ld	r22, Y
 1c2:	79 81       	ldd	r23, Y+1	; 0x01
 1c4:	8a 81       	ldd	r24, Y+2	; 0x02
 1c6:	9b 81       	ldd	r25, Y+3	; 0x03
 1c8:	0e 94 c0 00 	call	0x180	; 0x180 <calcula_pasos>
 1cc:	9d 83       	std	Y+5, r25	; 0x05
 1ce:	8c 83       	std	Y+4, r24	; 0x04
int calcula_pasos(float graus) {
	return (int)(1600.0 * (graus / 360.0));
}

void calcula_passos_moviments(void) {
	for (int i = 0; i < max_moves; i++) {
 1d0:	0f 5f       	subi	r16, 0xFF	; 255
 1d2:	1f 4f       	sbci	r17, 0xFF	; 255
 1d4:	04 30       	cpi	r16, 0x04	; 4
 1d6:	11 05       	cpc	r17, r1
 1d8:	54 f3       	brlt	.-44     	; 0x1ae <calcula_passos_moviments+0xe>
		movs[i].passos = calcula_pasos(movs[i].graus);
	}
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

000001e4 <__vector_11>:


// ISR PWM. Genera steps (polsos) per al motor. Fq: 1Khz; Dty: 50%.
ISR(TIMER1_COMPA_vect) {
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	8f 93       	push	r24
 1f4:	9f 93       	push	r25
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
	step_count++;
 1fa:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <step_count>
 1fe:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <step_count+0x1>
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <step_count+0x1>
 208:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <step_count>
	if (step_count >= movs[mov_index].passos) {
 20c:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <mov_index>
 210:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <mov_index+0x1>
 214:	ee 0f       	add	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	ee 0f       	add	r30, r30
 21e:	ff 1f       	adc	r31, r31
 220:	e0 50       	subi	r30, 0x00	; 0
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	24 81       	ldd	r18, Z+4	; 0x04
 226:	35 81       	ldd	r19, Z+5	; 0x05
 228:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <step_count>
 22c:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <step_count+0x1>
 230:	82 17       	cp	r24, r18
 232:	93 07       	cpc	r25, r19
 234:	1c f0       	brlt	.+6      	; 0x23c <__vector_11+0x58>
		MOV = 1;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	}
}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	3f 91       	pop	r19
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <__vector_3>:

ISR(PCINT0_vect) {
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	8f 93       	push	r24
 	if(MOV != 4)
 25e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 262:	84 30       	cpi	r24, 0x04	; 4
 264:	19 f0       	breq	.+6      	; 0x26c <__vector_3+0x1a>
	{
		MOV = 3;
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	}
	
}
 26c:	8f 91       	pop	r24
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <moviment_loop>:

void moviment_loop(void) {
	switch (MOV) {
 278:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 27c:	82 30       	cpi	r24, 0x02	; 2
 27e:	21 f1       	breq	.+72     	; 0x2c8 <moviment_loop+0x50>
 280:	18 f4       	brcc	.+6      	; 0x288 <moviment_loop+0x10>
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	41 f0       	breq	.+16     	; 0x296 <moviment_loop+0x1e>
 286:	08 95       	ret
 288:	83 30       	cpi	r24, 0x03	; 3
 28a:	09 f4       	brne	.+2      	; 0x28e <moviment_loop+0x16>
 28c:	4e c0       	rjmp	.+156    	; 0x32a <moviment_loop+0xb2>
 28e:	84 30       	cpi	r24, 0x04	; 4
 290:	09 f4       	brne	.+2      	; 0x294 <moviment_loop+0x1c>
 292:	5c c0       	rjmp	.+184    	; 0x34c <moviment_loop+0xd4>
 294:	08 95       	ret
		case 0: // En moviment
		break;

		case 1: // Atura PWM. Seq no acabada
		TCCR1A &= ~(1 << COM1A1); 
 296:	e0 e8       	ldi	r30, 0x80	; 128
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	8f 77       	andi	r24, 0x7F	; 127
 29e:	80 83       	st	Z, r24
		if (delay_ms(1000)) {
 2a0:	88 ee       	ldi	r24, 0xE8	; 232
 2a2:	93 e0       	ldi	r25, 0x03	; 3
 2a4:	0e 94 ce 01 	call	0x39c	; 0x39c <delay_ms>
 2a8:	88 23       	and	r24, r24
 2aa:	09 f4       	brne	.+2      	; 0x2ae <moviment_loop+0x36>
 2ac:	52 c0       	rjmp	.+164    	; 0x352 <moviment_loop+0xda>
			mov_index++;
 2ae:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <mov_index>
 2b2:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <mov_index+0x1>
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <mov_index+0x1>
 2bc:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <mov_index>
			MOV = 2;
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 2c6:	08 95       	ret
		}
		break;

		case 2:
		if (mov_index < max_moves) {
 2c8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <mov_index>
 2cc:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <mov_index+0x1>
 2d0:	04 97       	sbiw	r24, 0x04	; 4
 2d2:	3c f5       	brge	.+78     	; 0x322 <moviment_loop+0xaa>
			step_count = 0;
 2d4:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <step_count+0x1>
 2d8:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <step_count>
			TCNT1 = 0;
 2dc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 2e0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			TCCR1A |= (1 << COM1A1); // Reactiva PWM
 2e4:	e0 e8       	ldi	r30, 0x80	; 128
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	80 68       	ori	r24, 0x80	; 128
 2ec:	80 83       	st	Z, r24
			if(movs[mov_index].dir == 1)
 2ee:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <mov_index>
 2f2:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <mov_index+0x1>
 2f6:	ee 0f       	add	r30, r30
 2f8:	ff 1f       	adc	r31, r31
 2fa:	ee 0f       	add	r30, r30
 2fc:	ff 1f       	adc	r31, r31
 2fe:	ee 0f       	add	r30, r30
 300:	ff 1f       	adc	r31, r31
 302:	e0 50       	subi	r30, 0x00	; 0
 304:	ff 4f       	sbci	r31, 0xFF	; 255
 306:	86 81       	ldd	r24, Z+6	; 0x06
 308:	97 81       	ldd	r25, Z+7	; 0x07
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	21 f4       	brne	.+8      	; 0x316 <moviment_loop+0x9e>
			{
				PORTB &= ~(1 << DIR);		// Direcció CW				
 30e:	85 b1       	in	r24, 0x05	; 5
 310:	8e 7f       	andi	r24, 0xFE	; 254
 312:	85 b9       	out	0x05, r24	; 5
 314:	03 c0       	rjmp	.+6      	; 0x31c <moviment_loop+0xa4>
			}
			else 
			{
				PORTB |= (1 << DIR);		// Direcció CCW	
 316:	85 b1       	in	r24, 0x05	; 5
 318:	81 60       	ori	r24, 0x01	; 1
 31a:	85 b9       	out	0x05, r24	; 5
			}
			MOV = 0;
 31c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
 320:	08 95       	ret
			} else {
			MOV = 4;
 322:	84 e0       	ldi	r24, 0x04	; 4
 324:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 328:	08 95       	ret
		}
		break;

		case 3:
		// Llegim quin pin polsat
		if (PINB & (1 << PINB3)) {
 32a:	1b 9b       	sbis	0x03, 3	; 3
 32c:	09 c0       	rjmp	.+18     	; 0x340 <moviment_loop+0xc8>
			MOV = 2; // botó no polsat (pull-up actiu, pin alt)
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
			TCCR1A |= (1 << COM1A1); // Reactiva PWM
 334:	e0 e8       	ldi	r30, 0x80	; 128
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	80 68       	ori	r24, 0x80	; 128
 33c:	80 83       	st	Z, r24
 33e:	08 95       	ret
			} else {
			TCCR1A &= ~(1 << COM1A1);
 340:	e0 e8       	ldi	r30, 0x80	; 128
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	8f 77       	andi	r24, 0x7F	; 127
 348:	80 83       	st	Z, r24
 34a:	08 95       	ret
		}
		break;

		case 4:
		PORTB |= (1 << EN);
 34c:	85 b1       	in	r24, 0x05	; 5
 34e:	84 60       	ori	r24, 0x04	; 4
 350:	85 b9       	out	0x05, r24	; 5
 352:	08 95       	ret

00000354 <timer0_init>:

volatile uint16_t timer0_millis = 0;

void timer0_init(void) {
	// Mode CTC
	TCCR0A = (1 << WGM01);                  // Mode CTC (WGM01 = 1)
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);     // Prescaler = 64
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;                            // 1 ms amb F_CPU = 16 MHz i prescaler 64
 35c:	89 ef       	ldi	r24, 0xF9	; 249
 35e:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);                // Activa interrupció per Compare Match A
 360:	ee e6       	ldi	r30, 0x6E	; 110
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	82 60       	ori	r24, 0x02	; 2
 368:	80 83       	st	Z, r24
	sei();                                  // Activa interrupcions globals
 36a:	78 94       	sei
 36c:	08 95       	ret

0000036e <__vector_14>:
}

ISR(TIMER0_COMPA_vect) {
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
	timer0_millis++; // S'incrementa cada 1 ms
 37c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <timer0_millis>
 380:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <timer0_millis+0x1>
 384:	01 96       	adiw	r24, 0x01	; 1
 386:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <timer0_millis+0x1>
 38a:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <timer0_millis>
}
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <delay_ms>:

bool delay_ms(uint16_t ms) {
	if ((uint16_t)(timer0_millis) >= ms) {
 39c:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <timer0_millis>
 3a0:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <timer0_millis+0x1>
 3a4:	28 17       	cp	r18, r24
 3a6:	39 07       	cpc	r19, r25
 3a8:	30 f0       	brcs	.+12     	; 0x3b6 <delay_ms+0x1a>
		timer0_millis = 0;					// Retorna True quan ms <= nº milisegons
 3aa:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <timer0_millis+0x1>
 3ae:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <timer0_millis>
		return true;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	08 95       	ret
	}
	return false;
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	08 95       	ret

000003ba <main>:
#include "moviment.h"
#include "hardware_config.h"

int main(void) {
	// Precalcula els passos per cada moviment
	calcula_passos_moviments();
 3ba:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <calcula_passos_moviments>

	int0_init();
 3be:	0e 94 79 00 	call	0xf2	; 0xf2 <int0_init>
	timer0_init();
 3c2:	0e 94 aa 01 	call	0x354	; 0x354 <timer0_init>
	setup_driver();
 3c6:	0e 94 8b 00 	call	0x116	; 0x116 <setup_driver>

	while (1) {
		moviment_loop();
 3ca:	0e 94 3c 01 	call	0x278	; 0x278 <moviment_loop>
 3ce:	fd cf       	rjmp	.-6      	; 0x3ca <main+0x10>

000003d0 <__divsf3>:
 3d0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__divsf3x>
 3d4:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__fp_round>
 3d8:	0e 94 a0 02 	call	0x540	; 0x540 <__fp_pscB>
 3dc:	58 f0       	brcs	.+22     	; 0x3f4 <__divsf3+0x24>
 3de:	0e 94 99 02 	call	0x532	; 0x532 <__fp_pscA>
 3e2:	40 f0       	brcs	.+16     	; 0x3f4 <__divsf3+0x24>
 3e4:	29 f4       	brne	.+10     	; 0x3f0 <__divsf3+0x20>
 3e6:	5f 3f       	cpi	r21, 0xFF	; 255
 3e8:	29 f0       	breq	.+10     	; 0x3f4 <__divsf3+0x24>
 3ea:	0c 94 90 02 	jmp	0x520	; 0x520 <__fp_inf>
 3ee:	51 11       	cpse	r21, r1
 3f0:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__fp_szero>
 3f4:	0c 94 96 02 	jmp	0x52c	; 0x52c <__fp_nan>

000003f8 <__divsf3x>:
 3f8:	0e 94 b8 02 	call	0x570	; 0x570 <__fp_split3>
 3fc:	68 f3       	brcs	.-38     	; 0x3d8 <__divsf3+0x8>

000003fe <__divsf3_pse>:
 3fe:	99 23       	and	r25, r25
 400:	b1 f3       	breq	.-20     	; 0x3ee <__divsf3+0x1e>
 402:	55 23       	and	r21, r21
 404:	91 f3       	breq	.-28     	; 0x3ea <__divsf3+0x1a>
 406:	95 1b       	sub	r25, r21
 408:	55 0b       	sbc	r21, r21
 40a:	bb 27       	eor	r27, r27
 40c:	aa 27       	eor	r26, r26
 40e:	62 17       	cp	r22, r18
 410:	73 07       	cpc	r23, r19
 412:	84 07       	cpc	r24, r20
 414:	38 f0       	brcs	.+14     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 416:	9f 5f       	subi	r25, 0xFF	; 255
 418:	5f 4f       	sbci	r21, 0xFF	; 255
 41a:	22 0f       	add	r18, r18
 41c:	33 1f       	adc	r19, r19
 41e:	44 1f       	adc	r20, r20
 420:	aa 1f       	adc	r26, r26
 422:	a9 f3       	breq	.-22     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 424:	35 d0       	rcall	.+106    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 426:	0e 2e       	mov	r0, r30
 428:	3a f0       	brmi	.+14     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 42a:	e0 e8       	ldi	r30, 0x80	; 128
 42c:	32 d0       	rcall	.+100    	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 42e:	91 50       	subi	r25, 0x01	; 1
 430:	50 40       	sbci	r21, 0x00	; 0
 432:	e6 95       	lsr	r30
 434:	00 1c       	adc	r0, r0
 436:	ca f7       	brpl	.-14     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 438:	2b d0       	rcall	.+86     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 43a:	fe 2f       	mov	r31, r30
 43c:	29 d0       	rcall	.+82     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 43e:	66 0f       	add	r22, r22
 440:	77 1f       	adc	r23, r23
 442:	88 1f       	adc	r24, r24
 444:	bb 1f       	adc	r27, r27
 446:	26 17       	cp	r18, r22
 448:	37 07       	cpc	r19, r23
 44a:	48 07       	cpc	r20, r24
 44c:	ab 07       	cpc	r26, r27
 44e:	b0 e8       	ldi	r27, 0x80	; 128
 450:	09 f0       	breq	.+2      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 452:	bb 0b       	sbc	r27, r27
 454:	80 2d       	mov	r24, r0
 456:	bf 01       	movw	r22, r30
 458:	ff 27       	eor	r31, r31
 45a:	93 58       	subi	r25, 0x83	; 131
 45c:	5f 4f       	sbci	r21, 0xFF	; 255
 45e:	3a f0       	brmi	.+14     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 460:	9e 3f       	cpi	r25, 0xFE	; 254
 462:	51 05       	cpc	r21, r1
 464:	78 f0       	brcs	.+30     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 466:	0c 94 90 02 	jmp	0x520	; 0x520 <__fp_inf>
 46a:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__fp_szero>
 46e:	5f 3f       	cpi	r21, 0xFF	; 255
 470:	e4 f3       	brlt	.-8      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 472:	98 3e       	cpi	r25, 0xE8	; 232
 474:	d4 f3       	brlt	.-12     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 476:	86 95       	lsr	r24
 478:	77 95       	ror	r23
 47a:	67 95       	ror	r22
 47c:	b7 95       	ror	r27
 47e:	f7 95       	ror	r31
 480:	9f 5f       	subi	r25, 0xFF	; 255
 482:	c9 f7       	brne	.-14     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 484:	88 0f       	add	r24, r24
 486:	91 1d       	adc	r25, r1
 488:	96 95       	lsr	r25
 48a:	87 95       	ror	r24
 48c:	97 f9       	bld	r25, 7
 48e:	08 95       	ret
 490:	e1 e0       	ldi	r30, 0x01	; 1
 492:	66 0f       	add	r22, r22
 494:	77 1f       	adc	r23, r23
 496:	88 1f       	adc	r24, r24
 498:	bb 1f       	adc	r27, r27
 49a:	62 17       	cp	r22, r18
 49c:	73 07       	cpc	r23, r19
 49e:	84 07       	cpc	r24, r20
 4a0:	ba 07       	cpc	r27, r26
 4a2:	20 f0       	brcs	.+8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4a4:	62 1b       	sub	r22, r18
 4a6:	73 0b       	sbc	r23, r19
 4a8:	84 0b       	sbc	r24, r20
 4aa:	ba 0b       	sbc	r27, r26
 4ac:	ee 1f       	adc	r30, r30
 4ae:	88 f7       	brcc	.-30     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 4b0:	e0 95       	com	r30
 4b2:	08 95       	ret

000004b4 <__fixsfsi>:
 4b4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__fixunssfsi>
 4b8:	68 94       	set
 4ba:	b1 11       	cpse	r27, r1
 4bc:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__fp_szero>
 4c0:	08 95       	ret

000004c2 <__fixunssfsi>:
 4c2:	0e 94 c0 02 	call	0x580	; 0x580 <__fp_splitA>
 4c6:	88 f0       	brcs	.+34     	; 0x4ea <__fixunssfsi+0x28>
 4c8:	9f 57       	subi	r25, 0x7F	; 127
 4ca:	98 f0       	brcs	.+38     	; 0x4f2 <__fixunssfsi+0x30>
 4cc:	b9 2f       	mov	r27, r25
 4ce:	99 27       	eor	r25, r25
 4d0:	b7 51       	subi	r27, 0x17	; 23
 4d2:	b0 f0       	brcs	.+44     	; 0x500 <__fixunssfsi+0x3e>
 4d4:	e1 f0       	breq	.+56     	; 0x50e <__fixunssfsi+0x4c>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	88 1f       	adc	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	1a f0       	brmi	.+6      	; 0x4e6 <__fixunssfsi+0x24>
 4e0:	ba 95       	dec	r27
 4e2:	c9 f7       	brne	.-14     	; 0x4d6 <__fixunssfsi+0x14>
 4e4:	14 c0       	rjmp	.+40     	; 0x50e <__fixunssfsi+0x4c>
 4e6:	b1 30       	cpi	r27, 0x01	; 1
 4e8:	91 f0       	breq	.+36     	; 0x50e <__fixunssfsi+0x4c>
 4ea:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__fp_zero>
 4ee:	b1 e0       	ldi	r27, 0x01	; 1
 4f0:	08 95       	ret
 4f2:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_zero>
 4f6:	67 2f       	mov	r22, r23
 4f8:	78 2f       	mov	r23, r24
 4fa:	88 27       	eor	r24, r24
 4fc:	b8 5f       	subi	r27, 0xF8	; 248
 4fe:	39 f0       	breq	.+14     	; 0x50e <__fixunssfsi+0x4c>
 500:	b9 3f       	cpi	r27, 0xF9	; 249
 502:	cc f3       	brlt	.-14     	; 0x4f6 <__fixunssfsi+0x34>
 504:	86 95       	lsr	r24
 506:	77 95       	ror	r23
 508:	67 95       	ror	r22
 50a:	b3 95       	inc	r27
 50c:	d9 f7       	brne	.-10     	; 0x504 <__fixunssfsi+0x42>
 50e:	3e f4       	brtc	.+14     	; 0x51e <__fixunssfsi+0x5c>
 510:	90 95       	com	r25
 512:	80 95       	com	r24
 514:	70 95       	com	r23
 516:	61 95       	neg	r22
 518:	7f 4f       	sbci	r23, 0xFF	; 255
 51a:	8f 4f       	sbci	r24, 0xFF	; 255
 51c:	9f 4f       	sbci	r25, 0xFF	; 255
 51e:	08 95       	ret

00000520 <__fp_inf>:
 520:	97 f9       	bld	r25, 7
 522:	9f 67       	ori	r25, 0x7F	; 127
 524:	80 e8       	ldi	r24, 0x80	; 128
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	08 95       	ret

0000052c <__fp_nan>:
 52c:	9f ef       	ldi	r25, 0xFF	; 255
 52e:	80 ec       	ldi	r24, 0xC0	; 192
 530:	08 95       	ret

00000532 <__fp_pscA>:
 532:	00 24       	eor	r0, r0
 534:	0a 94       	dec	r0
 536:	16 16       	cp	r1, r22
 538:	17 06       	cpc	r1, r23
 53a:	18 06       	cpc	r1, r24
 53c:	09 06       	cpc	r0, r25
 53e:	08 95       	ret

00000540 <__fp_pscB>:
 540:	00 24       	eor	r0, r0
 542:	0a 94       	dec	r0
 544:	12 16       	cp	r1, r18
 546:	13 06       	cpc	r1, r19
 548:	14 06       	cpc	r1, r20
 54a:	05 06       	cpc	r0, r21
 54c:	08 95       	ret

0000054e <__fp_round>:
 54e:	09 2e       	mov	r0, r25
 550:	03 94       	inc	r0
 552:	00 0c       	add	r0, r0
 554:	11 f4       	brne	.+4      	; 0x55a <__fp_round+0xc>
 556:	88 23       	and	r24, r24
 558:	52 f0       	brmi	.+20     	; 0x56e <__fp_round+0x20>
 55a:	bb 0f       	add	r27, r27
 55c:	40 f4       	brcc	.+16     	; 0x56e <__fp_round+0x20>
 55e:	bf 2b       	or	r27, r31
 560:	11 f4       	brne	.+4      	; 0x566 <__fp_round+0x18>
 562:	60 ff       	sbrs	r22, 0
 564:	04 c0       	rjmp	.+8      	; 0x56e <__fp_round+0x20>
 566:	6f 5f       	subi	r22, 0xFF	; 255
 568:	7f 4f       	sbci	r23, 0xFF	; 255
 56a:	8f 4f       	sbci	r24, 0xFF	; 255
 56c:	9f 4f       	sbci	r25, 0xFF	; 255
 56e:	08 95       	ret

00000570 <__fp_split3>:
 570:	57 fd       	sbrc	r21, 7
 572:	90 58       	subi	r25, 0x80	; 128
 574:	44 0f       	add	r20, r20
 576:	55 1f       	adc	r21, r21
 578:	59 f0       	breq	.+22     	; 0x590 <__fp_splitA+0x10>
 57a:	5f 3f       	cpi	r21, 0xFF	; 255
 57c:	71 f0       	breq	.+28     	; 0x59a <__fp_splitA+0x1a>
 57e:	47 95       	ror	r20

00000580 <__fp_splitA>:
 580:	88 0f       	add	r24, r24
 582:	97 fb       	bst	r25, 7
 584:	99 1f       	adc	r25, r25
 586:	61 f0       	breq	.+24     	; 0x5a0 <__fp_splitA+0x20>
 588:	9f 3f       	cpi	r25, 0xFF	; 255
 58a:	79 f0       	breq	.+30     	; 0x5aa <__fp_splitA+0x2a>
 58c:	87 95       	ror	r24
 58e:	08 95       	ret
 590:	12 16       	cp	r1, r18
 592:	13 06       	cpc	r1, r19
 594:	14 06       	cpc	r1, r20
 596:	55 1f       	adc	r21, r21
 598:	f2 cf       	rjmp	.-28     	; 0x57e <__fp_split3+0xe>
 59a:	46 95       	lsr	r20
 59c:	f1 df       	rcall	.-30     	; 0x580 <__fp_splitA>
 59e:	08 c0       	rjmp	.+16     	; 0x5b0 <__fp_splitA+0x30>
 5a0:	16 16       	cp	r1, r22
 5a2:	17 06       	cpc	r1, r23
 5a4:	18 06       	cpc	r1, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	f1 cf       	rjmp	.-30     	; 0x58c <__fp_splitA+0xc>
 5aa:	86 95       	lsr	r24
 5ac:	71 05       	cpc	r23, r1
 5ae:	61 05       	cpc	r22, r1
 5b0:	08 94       	sec
 5b2:	08 95       	ret

000005b4 <__fp_zero>:
 5b4:	e8 94       	clt

000005b6 <__fp_szero>:
 5b6:	bb 27       	eor	r27, r27
 5b8:	66 27       	eor	r22, r22
 5ba:	77 27       	eor	r23, r23
 5bc:	cb 01       	movw	r24, r22
 5be:	97 f9       	bld	r25, 7
 5c0:	08 95       	ret

000005c2 <__mulsf3>:
 5c2:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__mulsf3x>
 5c6:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__fp_round>
 5ca:	0e 94 99 02 	call	0x532	; 0x532 <__fp_pscA>
 5ce:	38 f0       	brcs	.+14     	; 0x5de <__mulsf3+0x1c>
 5d0:	0e 94 a0 02 	call	0x540	; 0x540 <__fp_pscB>
 5d4:	20 f0       	brcs	.+8      	; 0x5de <__mulsf3+0x1c>
 5d6:	95 23       	and	r25, r21
 5d8:	11 f0       	breq	.+4      	; 0x5de <__mulsf3+0x1c>
 5da:	0c 94 90 02 	jmp	0x520	; 0x520 <__fp_inf>
 5de:	0c 94 96 02 	jmp	0x52c	; 0x52c <__fp_nan>
 5e2:	11 24       	eor	r1, r1
 5e4:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__fp_szero>

000005e8 <__mulsf3x>:
 5e8:	0e 94 b8 02 	call	0x570	; 0x570 <__fp_split3>
 5ec:	70 f3       	brcs	.-36     	; 0x5ca <__mulsf3+0x8>

000005ee <__mulsf3_pse>:
 5ee:	95 9f       	mul	r25, r21
 5f0:	c1 f3       	breq	.-16     	; 0x5e2 <__mulsf3+0x20>
 5f2:	95 0f       	add	r25, r21
 5f4:	50 e0       	ldi	r21, 0x00	; 0
 5f6:	55 1f       	adc	r21, r21
 5f8:	62 9f       	mul	r22, r18
 5fa:	f0 01       	movw	r30, r0
 5fc:	72 9f       	mul	r23, r18
 5fe:	bb 27       	eor	r27, r27
 600:	f0 0d       	add	r31, r0
 602:	b1 1d       	adc	r27, r1
 604:	63 9f       	mul	r22, r19
 606:	aa 27       	eor	r26, r26
 608:	f0 0d       	add	r31, r0
 60a:	b1 1d       	adc	r27, r1
 60c:	aa 1f       	adc	r26, r26
 60e:	64 9f       	mul	r22, r20
 610:	66 27       	eor	r22, r22
 612:	b0 0d       	add	r27, r0
 614:	a1 1d       	adc	r26, r1
 616:	66 1f       	adc	r22, r22
 618:	82 9f       	mul	r24, r18
 61a:	22 27       	eor	r18, r18
 61c:	b0 0d       	add	r27, r0
 61e:	a1 1d       	adc	r26, r1
 620:	62 1f       	adc	r22, r18
 622:	73 9f       	mul	r23, r19
 624:	b0 0d       	add	r27, r0
 626:	a1 1d       	adc	r26, r1
 628:	62 1f       	adc	r22, r18
 62a:	83 9f       	mul	r24, r19
 62c:	a0 0d       	add	r26, r0
 62e:	61 1d       	adc	r22, r1
 630:	22 1f       	adc	r18, r18
 632:	74 9f       	mul	r23, r20
 634:	33 27       	eor	r19, r19
 636:	a0 0d       	add	r26, r0
 638:	61 1d       	adc	r22, r1
 63a:	23 1f       	adc	r18, r19
 63c:	84 9f       	mul	r24, r20
 63e:	60 0d       	add	r22, r0
 640:	21 1d       	adc	r18, r1
 642:	82 2f       	mov	r24, r18
 644:	76 2f       	mov	r23, r22
 646:	6a 2f       	mov	r22, r26
 648:	11 24       	eor	r1, r1
 64a:	9f 57       	subi	r25, 0x7F	; 127
 64c:	50 40       	sbci	r21, 0x00	; 0
 64e:	9a f0       	brmi	.+38     	; 0x676 <__mulsf3_pse+0x88>
 650:	f1 f0       	breq	.+60     	; 0x68e <__mulsf3_pse+0xa0>
 652:	88 23       	and	r24, r24
 654:	4a f0       	brmi	.+18     	; 0x668 <__mulsf3_pse+0x7a>
 656:	ee 0f       	add	r30, r30
 658:	ff 1f       	adc	r31, r31
 65a:	bb 1f       	adc	r27, r27
 65c:	66 1f       	adc	r22, r22
 65e:	77 1f       	adc	r23, r23
 660:	88 1f       	adc	r24, r24
 662:	91 50       	subi	r25, 0x01	; 1
 664:	50 40       	sbci	r21, 0x00	; 0
 666:	a9 f7       	brne	.-22     	; 0x652 <__mulsf3_pse+0x64>
 668:	9e 3f       	cpi	r25, 0xFE	; 254
 66a:	51 05       	cpc	r21, r1
 66c:	80 f0       	brcs	.+32     	; 0x68e <__mulsf3_pse+0xa0>
 66e:	0c 94 90 02 	jmp	0x520	; 0x520 <__fp_inf>
 672:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__fp_szero>
 676:	5f 3f       	cpi	r21, 0xFF	; 255
 678:	e4 f3       	brlt	.-8      	; 0x672 <__mulsf3_pse+0x84>
 67a:	98 3e       	cpi	r25, 0xE8	; 232
 67c:	d4 f3       	brlt	.-12     	; 0x672 <__mulsf3_pse+0x84>
 67e:	86 95       	lsr	r24
 680:	77 95       	ror	r23
 682:	67 95       	ror	r22
 684:	b7 95       	ror	r27
 686:	f7 95       	ror	r31
 688:	e7 95       	ror	r30
 68a:	9f 5f       	subi	r25, 0xFF	; 255
 68c:	c1 f7       	brne	.-16     	; 0x67e <__mulsf3_pse+0x90>
 68e:	fe 2b       	or	r31, r30
 690:	88 0f       	add	r24, r24
 692:	91 1d       	adc	r25, r1
 694:	96 95       	lsr	r25
 696:	87 95       	ror	r24
 698:	97 f9       	bld	r25, 7
 69a:	08 95       	ret

0000069c <_exit>:
 69c:	f8 94       	cli

0000069e <__stop_program>:
 69e:	ff cf       	rjmp	.-2      	; 0x69e <__stop_program>
