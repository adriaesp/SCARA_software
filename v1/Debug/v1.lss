
v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  0000081a  000008ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000081a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080013a  0080013a  000008e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e50  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b8d  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000790  00000000  00000000  000023f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00002b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f9  00000000  00000000  00002d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000243  00000000  00000000  000032fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003540  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_3>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e1       	ldi	r30, 0x1A	; 26
  c8:	f8 e0       	ldi	r31, 0x08	; 8
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 33       	cpi	r26, 0x3A	; 58
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e3       	ldi	r26, 0x3A	; 58
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a3 34       	cpi	r26, 0x43	; 67
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <main>
  ea:	0c 94 0b 04 	jmp	0x816	; 0x816 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <int0_init>:
#include "hardware_config.h"



void int0_init(void) {
	DDRD &= ~(1 << FC_q2);
  f2:	8a b1       	in	r24, 0x0a	; 10
  f4:	87 7f       	andi	r24, 0xF7	; 247
  f6:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << FC_q2);
  f8:	8b b1       	in	r24, 0x0b	; 11
  fa:	87 7f       	andi	r24, 0xF7	; 247
  fc:	8b b9       	out	0x0b, r24	; 11
	EICRA |= (1 << ISC00);
  fe:	e9 e6       	ldi	r30, 0x69	; 105
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	81 60       	ori	r24, 0x01	; 1
 106:	80 83       	st	Z, r24
	EICRA &= ~(1 << ISC01);
 108:	80 81       	ld	r24, Z
 10a:	8d 7f       	andi	r24, 0xFD	; 253
 10c:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
 10e:	8d b3       	in	r24, 0x1d	; 29
 110:	81 60       	ori	r24, 0x01	; 1
 112:	8d bb       	out	0x1d, r24	; 29
 114:	08 95       	ret

00000116 <setup_driver>:
}

void setup_driver(void) {
	DDRB |= (1 << DIR) | (1 << STEP) | (1 << EN);  // PB0, PB1 i PB2 com a sortides 
 116:	84 b1       	in	r24, 0x04	; 4
 118:	87 60       	ori	r24, 0x07	; 7
 11a:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << FC_q2);	// PB3 com a entrada
 11c:	84 b1       	in	r24, 0x04	; 4
 11e:	87 7f       	andi	r24, 0xF7	; 247
 120:	84 b9       	out	0x04, r24	; 4

	PORTB |= (1 << DIR);		// Direcció CCW
 122:	85 b1       	in	r24, 0x05	; 5
 124:	81 60       	ori	r24, 0x01	; 1
 126:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~((1 << EN) |(1<<FC_q2));					// Enable LOW; Resist Pull down PINB3
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	83 7f       	andi	r24, 0xF3	; 243
 12c:	85 b9       	out	0x05, r24	; 5

	DDRC |= (1 << MS2) | (1 << MS1);		// PC5 i PC4 com a sortides 
 12e:	87 b1       	in	r24, 0x07	; 7
 130:	80 63       	ori	r24, 0x30	; 48
 132:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~((1 << MS2) | (1 << MS1));	// 00: 1/8 -> microstepping
 134:	88 b1       	in	r24, 0x08	; 8
 136:	8f 7c       	andi	r24, 0xCF	; 207
 138:	88 b9       	out	0x08, r24	; 8

	TCCR1A = (1 << COM1A1) | (1 << WGM11);
 13a:	82 e8       	ldi	r24, 0x82	; 130
 13c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	// Clear OC1A on compare match, set at BOTTOM
	// WGM11 = 1 alta res
	
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
 140:	8a e1       	ldi	r24, 0x1A	; 26
 142:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	// Prescaler 8
	
	TIMSK1 |= (1 << OCIE1A);
 146:	ef e6       	ldi	r30, 0x6F	; 111
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	80 83       	st	Z, r24
	// INT output compare match ENABLE
	
	PCMSK0 |= (1 << PCINT3);
 150:	eb e6       	ldi	r30, 0x6B	; 107
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	88 60       	ori	r24, 0x08	; 8
 158:	80 83       	st	Z, r24
	// Habilita interrupció per PB3 (PCINT3)
    PCICR |= (1 << PCIE0);
 15a:	e8 e6       	ldi	r30, 0x68	; 104
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	81 60       	ori	r24, 0x01	; 1
 162:	80 83       	st	Z, r24
	// Habilita interrupció per port B (PCIE0)
		
	ICR1 = 1999;  // Fq: 1Khz 
 164:	8f ec       	ldi	r24, 0xCF	; 207
 166:	97 e0       	ldi	r25, 0x07	; 7
 168:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 16c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = 999;  // Dty: 50%
 170:	87 ee       	ldi	r24, 0xE7	; 231
 172:	93 e0       	ldi	r25, 0x03	; 3
 174:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 178:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	sei();
 17c:	78 94       	sei
 17e:	08 95       	ret

00000180 <calcula_pasos>:
volatile uint8_t ACABAT = 0;

uint8_t max_moves = 0;

int calcula_pasos(float graus) {
	return (int)(5766.0 * (graus / 360.0));
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	44 eb       	ldi	r20, 0xB4	; 180
 186:	53 e4       	ldi	r21, 0x43	; 67
 188:	0e 94 81 02 	call	0x502	; 0x502 <__divsf3>
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e3       	ldi	r19, 0x30	; 48
 190:	44 eb       	ldi	r20, 0xB4	; 180
 192:	55 e4       	ldi	r21, 0x45	; 69
 194:	0e 94 9e 03 	call	0x73c	; 0x73c <__mulsf3>
 198:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__fixsfsi>
}
 19c:	cb 01       	movw	r24, r22
 19e:	08 95       	ret

000001a0 <calcula_passos_moviments>:

void calcula_passos_moviments(void) {
 1a0:	cf 92       	push	r12
 1a2:	df 92       	push	r13
 1a4:	ef 92       	push	r14
 1a6:	ff 92       	push	r15
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
	for (int i = 0;movs[i].graus != -1.0f; i++) {
 1ac:	c0 e0       	ldi	r28, 0x00	; 0
 1ae:	d0 e0       	ldi	r29, 0x00	; 0
 1b0:	12 c0       	rjmp	.+36     	; 0x1d6 <calcula_passos_moviments+0x36>
		movs[i].passos = calcula_pasos(movs[i].graus);
 1b2:	c7 01       	movw	r24, r14
 1b4:	b6 01       	movw	r22, r12
 1b6:	0e 94 c0 00 	call	0x180	; 0x180 <calcula_pasos>
 1ba:	fe 01       	movw	r30, r28
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	ee 0f       	add	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	ef 5f       	subi	r30, 0xFF	; 255
 1ca:	fe 4f       	sbci	r31, 0xFE	; 254
 1cc:	95 83       	std	Z+5, r25	; 0x05
 1ce:	84 83       	std	Z+4, r24	; 0x04
		max_moves = i;
 1d0:	c0 93 3a 01 	sts	0x013A, r28	; 0x80013a <__data_end>
int calcula_pasos(float graus) {
	return (int)(5766.0 * (graus / 360.0));
}

void calcula_passos_moviments(void) {
	for (int i = 0;movs[i].graus != -1.0f; i++) {
 1d4:	21 96       	adiw	r28, 0x01	; 1
 1d6:	fe 01       	movw	r30, r28
 1d8:	ee 0f       	add	r30, r30
 1da:	ff 1f       	adc	r31, r31
 1dc:	ee 0f       	add	r30, r30
 1de:	ff 1f       	adc	r31, r31
 1e0:	ee 0f       	add	r30, r30
 1e2:	ff 1f       	adc	r31, r31
 1e4:	ef 5f       	subi	r30, 0xFF	; 255
 1e6:	fe 4f       	sbci	r31, 0xFE	; 254
 1e8:	c0 80       	ld	r12, Z
 1ea:	d1 80       	ldd	r13, Z+1	; 0x01
 1ec:	e2 80       	ldd	r14, Z+2	; 0x02
 1ee:	f3 80       	ldd	r15, Z+3	; 0x03
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	40 e8       	ldi	r20, 0x80	; 128
 1f6:	5f eb       	ldi	r21, 0xBF	; 191
 1f8:	c7 01       	movw	r24, r14
 1fa:	b6 01       	movw	r22, r12
 1fc:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__cmpsf2>
 200:	81 11       	cpse	r24, r1
 202:	d7 cf       	rjmp	.-82     	; 0x1b2 <calcula_passos_moviments+0x12>
		movs[i].passos = calcula_pasos(movs[i].graus);
		max_moves = i;
	}
	
	
}
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	ff 90       	pop	r15
 20a:	ef 90       	pop	r14
 20c:	df 90       	pop	r13
 20e:	cf 90       	pop	r12
 210:	08 95       	ret

00000212 <__vector_11>:


// ISR PWM. Genera steps (polsos) per al motor. Fq: 1Khz; Dty: 50%.
ISR(TIMER1_COMPA_vect) {
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	2f 93       	push	r18
 21e:	3f 93       	push	r19
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	step_count++;
 228:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <step_count>
 22c:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <step_count+0x1>
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <step_count+0x1>
 236:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <step_count>
	if (step_count >= movs[mov_index].passos) {
 23a:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <mov_index>
 23e:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <mov_index+0x1>
 242:	ee 0f       	add	r30, r30
 244:	ff 1f       	adc	r31, r31
 246:	ee 0f       	add	r30, r30
 248:	ff 1f       	adc	r31, r31
 24a:	ee 0f       	add	r30, r30
 24c:	ff 1f       	adc	r31, r31
 24e:	ef 5f       	subi	r30, 0xFF	; 255
 250:	fe 4f       	sbci	r31, 0xFE	; 254
 252:	24 81       	ldd	r18, Z+4	; 0x04
 254:	35 81       	ldd	r19, Z+5	; 0x05
 256:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <step_count>
 25a:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <step_count+0x1>
 25e:	82 17       	cp	r24, r18
 260:	93 07       	cpc	r25, r19
 262:	34 f0       	brlt	.+12     	; 0x270 <__vector_11+0x5e>
		MOV = 1;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <MOV>
		HM = 3;
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 270:	ff 91       	pop	r31
 272:	ef 91       	pop	r30
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <__vector_3>:

ISR(PCINT0_vect) {
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	8f 93       	push	r24
 	if(MOV != 4)
 292:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <MOV>
 296:	84 30       	cpi	r24, 0x04	; 4
 298:	31 f0       	breq	.+12     	; 0x2a6 <__vector_3+0x20>
	{
		MOV = 3;
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <MOV>
		HM = 2;
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
}
 2a6:	8f 91       	pop	r24
 2a8:	0f 90       	pop	r0
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

000002b2 <homing>:



void homing(void){

	while(!ACABAT)
 2b2:	72 c0       	rjmp	.+228    	; 0x398 <homing+0xe6>
	{
		switch (HM){
 2b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	31 f1       	breq	.+76     	; 0x308 <homing+0x56>
 2bc:	83 30       	cpi	r24, 0x03	; 3
 2be:	09 f4       	brne	.+2      	; 0x2c2 <homing+0x10>
 2c0:	46 c0       	rjmp	.+140    	; 0x34e <homing+0x9c>
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <homing+0x16>
 2c6:	68 c0       	rjmp	.+208    	; 0x398 <homing+0xe6>
		case 0:		// Moviment
		break;

		case 1:		// Config inici desplaçament
		TCNT1 = 0;
 2c8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 2cc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		mov_index = 0;
 2d0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <mov_index+0x1>
 2d4:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <mov_index>
		movs[mov_index].passos = 5766;
 2d8:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <mov_index>
 2dc:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <mov_index+0x1>
 2e0:	ee 0f       	add	r30, r30
 2e2:	ff 1f       	adc	r31, r31
 2e4:	ee 0f       	add	r30, r30
 2e6:	ff 1f       	adc	r31, r31
 2e8:	ee 0f       	add	r30, r30
 2ea:	ff 1f       	adc	r31, r31
 2ec:	ef 5f       	subi	r30, 0xFF	; 255
 2ee:	fe 4f       	sbci	r31, 0xFE	; 254
 2f0:	86 e8       	ldi	r24, 0x86	; 134
 2f2:	96 e1       	ldi	r25, 0x16	; 22
 2f4:	95 83       	std	Z+5, r25	; 0x05
 2f6:	84 83       	std	Z+4, r24	; 0x04
		TCCR1A |= (1<<COM1A1);
 2f8:	e0 e8       	ldi	r30, 0x80	; 128
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	80 68       	ori	r24, 0x80	; 128
 300:	80 83       	st	Z, r24
		HM  = 0;
 302:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 306:	48 c0       	rjmp	.+144    	; 0x398 <homing+0xe6>

		case 2:		// Config desplaçament a home
		PORTB &= ~(1<<DIR);
 308:	85 b1       	in	r24, 0x05	; 5
 30a:	8e 7f       	andi	r24, 0xFE	; 254
 30c:	85 b9       	out	0x05, r24	; 5
		step_count = 0;
 30e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <step_count+0x1>
 312:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <step_count>
		TCNT1 = 0;
 316:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 31a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		movs[mov_index].passos = 1920;
 31e:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <mov_index>
 322:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <mov_index+0x1>
 326:	ee 0f       	add	r30, r30
 328:	ff 1f       	adc	r31, r31
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	ee 0f       	add	r30, r30
 330:	ff 1f       	adc	r31, r31
 332:	ef 5f       	subi	r30, 0xFF	; 255
 334:	fe 4f       	sbci	r31, 0xFE	; 254
 336:	80 e8       	ldi	r24, 0x80	; 128
 338:	97 e0       	ldi	r25, 0x07	; 7
 33a:	95 83       	std	Z+5, r25	; 0x05
 33c:	84 83       	std	Z+4, r24	; 0x04
		PCMSK0 &= ~(1 << PCINT3);
 33e:	eb e6       	ldi	r30, 0x6B	; 107
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	87 7f       	andi	r24, 0xF7	; 247
 346:	80 83       	st	Z, r24
		HM  = 0;
 348:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 34c:	25 c0       	rjmp	.+74     	; 0x398 <homing+0xe6>

		case 3:		// Home q2 acabat
		TIMSK1 &= ~(1 << OCIE1A);		// Timer1 INT OFF
 34e:	ef e6       	ldi	r30, 0x6F	; 111
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	8d 7f       	andi	r24, 0xFD	; 253
 356:	80 83       	st	Z, r24
		cli();
 358:	f8 94       	cli
		TCCR1A &= ~(1<<COM1A1);			// PWM OFF
 35a:	e0 e8       	ldi	r30, 0x80	; 128
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	8f 77       	andi	r24, 0x7F	; 127
 362:	80 83       	st	Z, r24
		PCMSK0 |= (1 << PCINT3);
 364:	eb e6       	ldi	r30, 0x6B	; 107
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	88 60       	ori	r24, 0x08	; 8
 36c:	80 83       	st	Z, r24
		ACABAT = 1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <ACABAT>
		PORTB |= (1 << EN);
 374:	85 b1       	in	r24, 0x05	; 5
 376:	84 60       	ori	r24, 0x04	; 4
 378:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37a:	2f e3       	ldi	r18, 0x3F	; 63
 37c:	8d e0       	ldi	r24, 0x0D	; 13
 37e:	93 e0       	ldi	r25, 0x03	; 3
 380:	21 50       	subi	r18, 0x01	; 1
 382:	80 40       	sbci	r24, 0x00	; 0
 384:	90 40       	sbci	r25, 0x00	; 0
 386:	e1 f7       	brne	.-8      	; 0x380 <homing+0xce>
 388:	00 c0       	rjmp	.+0      	; 0x38a <homing+0xd8>
 38a:	00 00       	nop
		_delay_ms(1000);
		MOV = 0;
 38c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <MOV>
		step_count = 0;
 390:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <step_count+0x1>
 394:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <step_count>



void homing(void){

	while(!ACABAT)
 398:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <ACABAT>
 39c:	88 23       	and	r24, r24
 39e:	09 f4       	brne	.+2      	; 0x3a2 <homing+0xf0>
 3a0:	89 cf       	rjmp	.-238    	; 0x2b4 <homing+0x2>
		MOV = 0;
		step_count = 0;
		break;
		}
	}
}
 3a2:	08 95       	ret

000003a4 <moviment_loop>:



void moviment_loop(void) {
	switch (MOV) {
 3a4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <MOV>
 3a8:	82 30       	cpi	r24, 0x02	; 2
 3aa:	c9 f0       	breq	.+50     	; 0x3de <moviment_loop+0x3a>
 3ac:	18 f4       	brcc	.+6      	; 0x3b4 <moviment_loop+0x10>
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	41 f0       	breq	.+16     	; 0x3c2 <moviment_loop+0x1e>
 3b2:	08 95       	ret
 3b4:	83 30       	cpi	r24, 0x03	; 3
 3b6:	09 f4       	brne	.+2      	; 0x3ba <moviment_loop+0x16>
 3b8:	55 c0       	rjmp	.+170    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 3ba:	84 30       	cpi	r24, 0x04	; 4
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <moviment_loop+0x1c>
 3be:	63 c0       	rjmp	.+198    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 3c0:	08 95       	ret
		case 0: // En moviment
		break;

		case 1: // Atura PWM. Seq no acabada
		TCCR1A &= ~(1 << COM1A1); 
 3c2:	e0 e8       	ldi	r30, 0x80	; 128
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	8f 77       	andi	r24, 0x7F	; 127
 3ca:	80 83       	st	Z, r24
		TIMSK1 &= ~(1 << OCIE1A);
 3cc:	ef e6       	ldi	r30, 0x6F	; 111
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	8d 7f       	andi	r24, 0xFD	; 253
 3d4:	80 83       	st	Z, r24
		MOV = 2;
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <MOV>
		
		break;
 3dc:	08 95       	ret

		case 2:
		if (mov_index <= max_moves) {
 3de:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <mov_index>
 3e8:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <mov_index+0x1>
 3ec:	82 17       	cp	r24, r18
 3ee:	93 07       	cpc	r25, r19
 3f0:	ac f1       	brlt	.+106    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
			mov_index++;
 3f2:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <mov_index>
 3f6:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <mov_index+0x1>
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <mov_index+0x1>
 400:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <mov_index>
			step_count = 0;
 404:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <step_count+0x1>
 408:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <step_count>
			TCNT1 = 0;
 40c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 410:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			TIMSK1 |= (1 << OCIE1A);		// Timer1 INT ON
 414:	ef e6       	ldi	r30, 0x6F	; 111
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	82 60       	ori	r24, 0x02	; 2
 41c:	80 83       	st	Z, r24
			TCCR1A |= (1 << COM1A1);		// Reactiva PWM
 41e:	e0 e8       	ldi	r30, 0x80	; 128
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	80 68       	ori	r24, 0x80	; 128
 426:	80 83       	st	Z, r24
			if(movs[mov_index].dir == 1)
 428:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <mov_index>
 42c:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <mov_index+0x1>
 430:	ee 0f       	add	r30, r30
 432:	ff 1f       	adc	r31, r31
 434:	ee 0f       	add	r30, r30
 436:	ff 1f       	adc	r31, r31
 438:	ee 0f       	add	r30, r30
 43a:	ff 1f       	adc	r31, r31
 43c:	ef 5f       	subi	r30, 0xFF	; 255
 43e:	fe 4f       	sbci	r31, 0xFE	; 254
 440:	86 81       	ldd	r24, Z+6	; 0x06
 442:	97 81       	ldd	r25, Z+7	; 0x07
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	21 f4       	brne	.+8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
			{
				PORTB &= ~(1 << DIR);		// Direcció CW				
 448:	85 b1       	in	r24, 0x05	; 5
 44a:	8e 7f       	andi	r24, 0xFE	; 254
 44c:	85 b9       	out	0x05, r24	; 5
 44e:	03 c0       	rjmp	.+6      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			}
			else 
			{
				PORTB |= (1 << DIR);		// Direcció CCW	
 450:	85 b1       	in	r24, 0x05	; 5
 452:	81 60       	ori	r24, 0x01	; 1
 454:	85 b9       	out	0x05, r24	; 5
			}
			MOV = 0;
 456:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <MOV>
 45a:	08 95       	ret
			} else {
			MOV = 4;
 45c:	84 e0       	ldi	r24, 0x04	; 4
 45e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <MOV>
 462:	08 95       	ret
		}
		break;

		case 3:
		// Llegim quin pin polsat
		if (PINB & (1 << PINB3)) {
 464:	1b 9b       	sbis	0x03, 3	; 3
 466:	09 c0       	rjmp	.+18     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			MOV = 2;						// botó no polsat (pull-up actiu, pin alt)
 468:	82 e0       	ldi	r24, 0x02	; 2
 46a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <MOV>
			TCCR1A |= (1 << COM1A1);		// Reactiva PWM
 46e:	e0 e8       	ldi	r30, 0x80	; 128
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	80 68       	ori	r24, 0x80	; 128
 476:	80 83       	st	Z, r24
 478:	08 95       	ret
			} else {
			TCCR1A &= ~(1 << COM1A1);		// Para timer1
 47a:	e0 e8       	ldi	r30, 0x80	; 128
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	8f 77       	andi	r24, 0x7F	; 127
 482:	80 83       	st	Z, r24
 484:	08 95       	ret
		}
		break;

		case 4:
		PORTB |= (1 << EN);
 486:	85 b1       	in	r24, 0x05	; 5
 488:	84 60       	ori	r24, 0x04	; 4
 48a:	85 b9       	out	0x05, r24	; 5
 48c:	08 95       	ret

0000048e <timer0_init>:

volatile uint16_t timer0_millis = 0;

void timer0_init(void) {
	// Mode CTC
	TCCR0A = (1 << WGM01);                  // Mode CTC (WGM01 = 1)
 48e:	82 e0       	ldi	r24, 0x02	; 2
 490:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);     // Prescaler = 64
 492:	83 e0       	ldi	r24, 0x03	; 3
 494:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;                            // 1 ms amb F_CPU = 16 MHz i prescaler 64
 496:	89 ef       	ldi	r24, 0xF9	; 249
 498:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);                // Activa interrupció per Compare Match A
 49a:	ee e6       	ldi	r30, 0x6E	; 110
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	82 60       	ori	r24, 0x02	; 2
 4a2:	80 83       	st	Z, r24
	sei();                                  // Activa interrupcions globals
 4a4:	78 94       	sei
 4a6:	08 95       	ret

000004a8 <__vector_14>:
}

ISR(TIMER0_COMPA_vect) {
 4a8:	1f 92       	push	r1
 4aa:	0f 92       	push	r0
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	0f 92       	push	r0
 4b0:	11 24       	eor	r1, r1
 4b2:	8f 93       	push	r24
 4b4:	9f 93       	push	r25
	timer0_millis++; // S'incrementa cada 1 ms
 4b6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <timer0_millis>
 4ba:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <timer0_millis+0x1>
 4be:	01 96       	adiw	r24, 0x01	; 1
 4c0:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <timer0_millis+0x1>
 4c4:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <timer0_millis>
}
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <main>:
#include "hardware_config.h"

int main(void) {
	// Precalcula els passos per cada moviment
	
	calcula_passos_moviments();
 4d6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <calcula_passos_moviments>
	int0_init();
 4da:	0e 94 79 00 	call	0xf2	; 0xf2 <int0_init>
	timer0_init();
 4de:	0e 94 47 02 	call	0x48e	; 0x48e <timer0_init>
	setup_driver();
 4e2:	0e 94 8b 00 	call	0x116	; 0x116 <setup_driver>
	homing();
 4e6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <homing>
	calcula_passos_moviments();
 4ea:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <calcula_passos_moviments>
	setup_driver();
 4ee:	0e 94 8b 00 	call	0x116	; 0x116 <setup_driver>

	while (1) {
		moviment_loop();
 4f2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <moviment_loop>
 4f6:	fd cf       	rjmp	.-6      	; 0x4f2 <main+0x1c>

000004f8 <__cmpsf2>:
 4f8:	0e 94 29 03 	call	0x652	; 0x652 <__fp_cmp>
 4fc:	08 f4       	brcc	.+2      	; 0x500 <__cmpsf2+0x8>
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	08 95       	ret

00000502 <__divsf3>:
 502:	0e 94 95 02 	call	0x52a	; 0x52a <__divsf3x>
 506:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_round>
 50a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fp_pscB>
 50e:	58 f0       	brcs	.+22     	; 0x526 <__divsf3+0x24>
 510:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_pscA>
 514:	40 f0       	brcs	.+16     	; 0x526 <__divsf3+0x24>
 516:	29 f4       	brne	.+10     	; 0x522 <__divsf3+0x20>
 518:	5f 3f       	cpi	r21, 0xFF	; 255
 51a:	29 f0       	breq	.+10     	; 0x526 <__divsf3+0x24>
 51c:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_inf>
 520:	51 11       	cpse	r21, r1
 522:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>
 526:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_nan>

0000052a <__divsf3x>:
 52a:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_split3>
 52e:	68 f3       	brcs	.-38     	; 0x50a <__divsf3+0x8>

00000530 <__divsf3_pse>:
 530:	99 23       	and	r25, r25
 532:	b1 f3       	breq	.-20     	; 0x520 <__divsf3+0x1e>
 534:	55 23       	and	r21, r21
 536:	91 f3       	breq	.-28     	; 0x51c <__divsf3+0x1a>
 538:	95 1b       	sub	r25, r21
 53a:	55 0b       	sbc	r21, r21
 53c:	bb 27       	eor	r27, r27
 53e:	aa 27       	eor	r26, r26
 540:	62 17       	cp	r22, r18
 542:	73 07       	cpc	r23, r19
 544:	84 07       	cpc	r24, r20
 546:	38 f0       	brcs	.+14     	; 0x556 <__divsf3_pse+0x26>
 548:	9f 5f       	subi	r25, 0xFF	; 255
 54a:	5f 4f       	sbci	r21, 0xFF	; 255
 54c:	22 0f       	add	r18, r18
 54e:	33 1f       	adc	r19, r19
 550:	44 1f       	adc	r20, r20
 552:	aa 1f       	adc	r26, r26
 554:	a9 f3       	breq	.-22     	; 0x540 <__divsf3_pse+0x10>
 556:	35 d0       	rcall	.+106    	; 0x5c2 <__divsf3_pse+0x92>
 558:	0e 2e       	mov	r0, r30
 55a:	3a f0       	brmi	.+14     	; 0x56a <__divsf3_pse+0x3a>
 55c:	e0 e8       	ldi	r30, 0x80	; 128
 55e:	32 d0       	rcall	.+100    	; 0x5c4 <__divsf3_pse+0x94>
 560:	91 50       	subi	r25, 0x01	; 1
 562:	50 40       	sbci	r21, 0x00	; 0
 564:	e6 95       	lsr	r30
 566:	00 1c       	adc	r0, r0
 568:	ca f7       	brpl	.-14     	; 0x55c <__divsf3_pse+0x2c>
 56a:	2b d0       	rcall	.+86     	; 0x5c2 <__divsf3_pse+0x92>
 56c:	fe 2f       	mov	r31, r30
 56e:	29 d0       	rcall	.+82     	; 0x5c2 <__divsf3_pse+0x92>
 570:	66 0f       	add	r22, r22
 572:	77 1f       	adc	r23, r23
 574:	88 1f       	adc	r24, r24
 576:	bb 1f       	adc	r27, r27
 578:	26 17       	cp	r18, r22
 57a:	37 07       	cpc	r19, r23
 57c:	48 07       	cpc	r20, r24
 57e:	ab 07       	cpc	r26, r27
 580:	b0 e8       	ldi	r27, 0x80	; 128
 582:	09 f0       	breq	.+2      	; 0x586 <__divsf3_pse+0x56>
 584:	bb 0b       	sbc	r27, r27
 586:	80 2d       	mov	r24, r0
 588:	bf 01       	movw	r22, r30
 58a:	ff 27       	eor	r31, r31
 58c:	93 58       	subi	r25, 0x83	; 131
 58e:	5f 4f       	sbci	r21, 0xFF	; 255
 590:	3a f0       	brmi	.+14     	; 0x5a0 <__divsf3_pse+0x70>
 592:	9e 3f       	cpi	r25, 0xFE	; 254
 594:	51 05       	cpc	r21, r1
 596:	78 f0       	brcs	.+30     	; 0x5b6 <__divsf3_pse+0x86>
 598:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_inf>
 59c:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>
 5a0:	5f 3f       	cpi	r21, 0xFF	; 255
 5a2:	e4 f3       	brlt	.-8      	; 0x59c <__divsf3_pse+0x6c>
 5a4:	98 3e       	cpi	r25, 0xE8	; 232
 5a6:	d4 f3       	brlt	.-12     	; 0x59c <__divsf3_pse+0x6c>
 5a8:	86 95       	lsr	r24
 5aa:	77 95       	ror	r23
 5ac:	67 95       	ror	r22
 5ae:	b7 95       	ror	r27
 5b0:	f7 95       	ror	r31
 5b2:	9f 5f       	subi	r25, 0xFF	; 255
 5b4:	c9 f7       	brne	.-14     	; 0x5a8 <__divsf3_pse+0x78>
 5b6:	88 0f       	add	r24, r24
 5b8:	91 1d       	adc	r25, r1
 5ba:	96 95       	lsr	r25
 5bc:	87 95       	ror	r24
 5be:	97 f9       	bld	r25, 7
 5c0:	08 95       	ret
 5c2:	e1 e0       	ldi	r30, 0x01	; 1
 5c4:	66 0f       	add	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	88 1f       	adc	r24, r24
 5ca:	bb 1f       	adc	r27, r27
 5cc:	62 17       	cp	r22, r18
 5ce:	73 07       	cpc	r23, r19
 5d0:	84 07       	cpc	r24, r20
 5d2:	ba 07       	cpc	r27, r26
 5d4:	20 f0       	brcs	.+8      	; 0x5de <__divsf3_pse+0xae>
 5d6:	62 1b       	sub	r22, r18
 5d8:	73 0b       	sbc	r23, r19
 5da:	84 0b       	sbc	r24, r20
 5dc:	ba 0b       	sbc	r27, r26
 5de:	ee 1f       	adc	r30, r30
 5e0:	88 f7       	brcc	.-30     	; 0x5c4 <__divsf3_pse+0x94>
 5e2:	e0 95       	com	r30
 5e4:	08 95       	ret

000005e6 <__fixsfsi>:
 5e6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__fixunssfsi>
 5ea:	68 94       	set
 5ec:	b1 11       	cpse	r27, r1
 5ee:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>
 5f2:	08 95       	ret

000005f4 <__fixunssfsi>:
 5f4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fp_splitA>
 5f8:	88 f0       	brcs	.+34     	; 0x61c <__fixunssfsi+0x28>
 5fa:	9f 57       	subi	r25, 0x7F	; 127
 5fc:	98 f0       	brcs	.+38     	; 0x624 <__fixunssfsi+0x30>
 5fe:	b9 2f       	mov	r27, r25
 600:	99 27       	eor	r25, r25
 602:	b7 51       	subi	r27, 0x17	; 23
 604:	b0 f0       	brcs	.+44     	; 0x632 <__fixunssfsi+0x3e>
 606:	e1 f0       	breq	.+56     	; 0x640 <__fixunssfsi+0x4c>
 608:	66 0f       	add	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	1a f0       	brmi	.+6      	; 0x618 <__fixunssfsi+0x24>
 612:	ba 95       	dec	r27
 614:	c9 f7       	brne	.-14     	; 0x608 <__fixunssfsi+0x14>
 616:	14 c0       	rjmp	.+40     	; 0x640 <__fixunssfsi+0x4c>
 618:	b1 30       	cpi	r27, 0x01	; 1
 61a:	91 f0       	breq	.+36     	; 0x640 <__fixunssfsi+0x4c>
 61c:	0e 94 97 03 	call	0x72e	; 0x72e <__fp_zero>
 620:	b1 e0       	ldi	r27, 0x01	; 1
 622:	08 95       	ret
 624:	0c 94 97 03 	jmp	0x72e	; 0x72e <__fp_zero>
 628:	67 2f       	mov	r22, r23
 62a:	78 2f       	mov	r23, r24
 62c:	88 27       	eor	r24, r24
 62e:	b8 5f       	subi	r27, 0xF8	; 248
 630:	39 f0       	breq	.+14     	; 0x640 <__fixunssfsi+0x4c>
 632:	b9 3f       	cpi	r27, 0xF9	; 249
 634:	cc f3       	brlt	.-14     	; 0x628 <__fixunssfsi+0x34>
 636:	86 95       	lsr	r24
 638:	77 95       	ror	r23
 63a:	67 95       	ror	r22
 63c:	b3 95       	inc	r27
 63e:	d9 f7       	brne	.-10     	; 0x636 <__fixunssfsi+0x42>
 640:	3e f4       	brtc	.+14     	; 0x650 <__fixunssfsi+0x5c>
 642:	90 95       	com	r25
 644:	80 95       	com	r24
 646:	70 95       	com	r23
 648:	61 95       	neg	r22
 64a:	7f 4f       	sbci	r23, 0xFF	; 255
 64c:	8f 4f       	sbci	r24, 0xFF	; 255
 64e:	9f 4f       	sbci	r25, 0xFF	; 255
 650:	08 95       	ret

00000652 <__fp_cmp>:
 652:	99 0f       	add	r25, r25
 654:	00 08       	sbc	r0, r0
 656:	55 0f       	add	r21, r21
 658:	aa 0b       	sbc	r26, r26
 65a:	e0 e8       	ldi	r30, 0x80	; 128
 65c:	fe ef       	ldi	r31, 0xFE	; 254
 65e:	16 16       	cp	r1, r22
 660:	17 06       	cpc	r1, r23
 662:	e8 07       	cpc	r30, r24
 664:	f9 07       	cpc	r31, r25
 666:	c0 f0       	brcs	.+48     	; 0x698 <__fp_cmp+0x46>
 668:	12 16       	cp	r1, r18
 66a:	13 06       	cpc	r1, r19
 66c:	e4 07       	cpc	r30, r20
 66e:	f5 07       	cpc	r31, r21
 670:	98 f0       	brcs	.+38     	; 0x698 <__fp_cmp+0x46>
 672:	62 1b       	sub	r22, r18
 674:	73 0b       	sbc	r23, r19
 676:	84 0b       	sbc	r24, r20
 678:	95 0b       	sbc	r25, r21
 67a:	39 f4       	brne	.+14     	; 0x68a <__fp_cmp+0x38>
 67c:	0a 26       	eor	r0, r26
 67e:	61 f0       	breq	.+24     	; 0x698 <__fp_cmp+0x46>
 680:	23 2b       	or	r18, r19
 682:	24 2b       	or	r18, r20
 684:	25 2b       	or	r18, r21
 686:	21 f4       	brne	.+8      	; 0x690 <__fp_cmp+0x3e>
 688:	08 95       	ret
 68a:	0a 26       	eor	r0, r26
 68c:	09 f4       	brne	.+2      	; 0x690 <__fp_cmp+0x3e>
 68e:	a1 40       	sbci	r26, 0x01	; 1
 690:	a6 95       	lsr	r26
 692:	8f ef       	ldi	r24, 0xFF	; 255
 694:	81 1d       	adc	r24, r1
 696:	81 1d       	adc	r24, r1
 698:	08 95       	ret

0000069a <__fp_inf>:
 69a:	97 f9       	bld	r25, 7
 69c:	9f 67       	ori	r25, 0x7F	; 127
 69e:	80 e8       	ldi	r24, 0x80	; 128
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	60 e0       	ldi	r22, 0x00	; 0
 6a4:	08 95       	ret

000006a6 <__fp_nan>:
 6a6:	9f ef       	ldi	r25, 0xFF	; 255
 6a8:	80 ec       	ldi	r24, 0xC0	; 192
 6aa:	08 95       	ret

000006ac <__fp_pscA>:
 6ac:	00 24       	eor	r0, r0
 6ae:	0a 94       	dec	r0
 6b0:	16 16       	cp	r1, r22
 6b2:	17 06       	cpc	r1, r23
 6b4:	18 06       	cpc	r1, r24
 6b6:	09 06       	cpc	r0, r25
 6b8:	08 95       	ret

000006ba <__fp_pscB>:
 6ba:	00 24       	eor	r0, r0
 6bc:	0a 94       	dec	r0
 6be:	12 16       	cp	r1, r18
 6c0:	13 06       	cpc	r1, r19
 6c2:	14 06       	cpc	r1, r20
 6c4:	05 06       	cpc	r0, r21
 6c6:	08 95       	ret

000006c8 <__fp_round>:
 6c8:	09 2e       	mov	r0, r25
 6ca:	03 94       	inc	r0
 6cc:	00 0c       	add	r0, r0
 6ce:	11 f4       	brne	.+4      	; 0x6d4 <__fp_round+0xc>
 6d0:	88 23       	and	r24, r24
 6d2:	52 f0       	brmi	.+20     	; 0x6e8 <__fp_round+0x20>
 6d4:	bb 0f       	add	r27, r27
 6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__fp_round+0x20>
 6d8:	bf 2b       	or	r27, r31
 6da:	11 f4       	brne	.+4      	; 0x6e0 <__fp_round+0x18>
 6dc:	60 ff       	sbrs	r22, 0
 6de:	04 c0       	rjmp	.+8      	; 0x6e8 <__fp_round+0x20>
 6e0:	6f 5f       	subi	r22, 0xFF	; 255
 6e2:	7f 4f       	sbci	r23, 0xFF	; 255
 6e4:	8f 4f       	sbci	r24, 0xFF	; 255
 6e6:	9f 4f       	sbci	r25, 0xFF	; 255
 6e8:	08 95       	ret

000006ea <__fp_split3>:
 6ea:	57 fd       	sbrc	r21, 7
 6ec:	90 58       	subi	r25, 0x80	; 128
 6ee:	44 0f       	add	r20, r20
 6f0:	55 1f       	adc	r21, r21
 6f2:	59 f0       	breq	.+22     	; 0x70a <__fp_splitA+0x10>
 6f4:	5f 3f       	cpi	r21, 0xFF	; 255
 6f6:	71 f0       	breq	.+28     	; 0x714 <__fp_splitA+0x1a>
 6f8:	47 95       	ror	r20

000006fa <__fp_splitA>:
 6fa:	88 0f       	add	r24, r24
 6fc:	97 fb       	bst	r25, 7
 6fe:	99 1f       	adc	r25, r25
 700:	61 f0       	breq	.+24     	; 0x71a <__fp_splitA+0x20>
 702:	9f 3f       	cpi	r25, 0xFF	; 255
 704:	79 f0       	breq	.+30     	; 0x724 <__fp_splitA+0x2a>
 706:	87 95       	ror	r24
 708:	08 95       	ret
 70a:	12 16       	cp	r1, r18
 70c:	13 06       	cpc	r1, r19
 70e:	14 06       	cpc	r1, r20
 710:	55 1f       	adc	r21, r21
 712:	f2 cf       	rjmp	.-28     	; 0x6f8 <__fp_split3+0xe>
 714:	46 95       	lsr	r20
 716:	f1 df       	rcall	.-30     	; 0x6fa <__fp_splitA>
 718:	08 c0       	rjmp	.+16     	; 0x72a <__fp_splitA+0x30>
 71a:	16 16       	cp	r1, r22
 71c:	17 06       	cpc	r1, r23
 71e:	18 06       	cpc	r1, r24
 720:	99 1f       	adc	r25, r25
 722:	f1 cf       	rjmp	.-30     	; 0x706 <__fp_splitA+0xc>
 724:	86 95       	lsr	r24
 726:	71 05       	cpc	r23, r1
 728:	61 05       	cpc	r22, r1
 72a:	08 94       	sec
 72c:	08 95       	ret

0000072e <__fp_zero>:
 72e:	e8 94       	clt

00000730 <__fp_szero>:
 730:	bb 27       	eor	r27, r27
 732:	66 27       	eor	r22, r22
 734:	77 27       	eor	r23, r23
 736:	cb 01       	movw	r24, r22
 738:	97 f9       	bld	r25, 7
 73a:	08 95       	ret

0000073c <__mulsf3>:
 73c:	0e 94 b1 03 	call	0x762	; 0x762 <__mulsf3x>
 740:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_round>
 744:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_pscA>
 748:	38 f0       	brcs	.+14     	; 0x758 <__mulsf3+0x1c>
 74a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fp_pscB>
 74e:	20 f0       	brcs	.+8      	; 0x758 <__mulsf3+0x1c>
 750:	95 23       	and	r25, r21
 752:	11 f0       	breq	.+4      	; 0x758 <__mulsf3+0x1c>
 754:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_inf>
 758:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_nan>
 75c:	11 24       	eor	r1, r1
 75e:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>

00000762 <__mulsf3x>:
 762:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_split3>
 766:	70 f3       	brcs	.-36     	; 0x744 <__mulsf3+0x8>

00000768 <__mulsf3_pse>:
 768:	95 9f       	mul	r25, r21
 76a:	c1 f3       	breq	.-16     	; 0x75c <__mulsf3+0x20>
 76c:	95 0f       	add	r25, r21
 76e:	50 e0       	ldi	r21, 0x00	; 0
 770:	55 1f       	adc	r21, r21
 772:	62 9f       	mul	r22, r18
 774:	f0 01       	movw	r30, r0
 776:	72 9f       	mul	r23, r18
 778:	bb 27       	eor	r27, r27
 77a:	f0 0d       	add	r31, r0
 77c:	b1 1d       	adc	r27, r1
 77e:	63 9f       	mul	r22, r19
 780:	aa 27       	eor	r26, r26
 782:	f0 0d       	add	r31, r0
 784:	b1 1d       	adc	r27, r1
 786:	aa 1f       	adc	r26, r26
 788:	64 9f       	mul	r22, r20
 78a:	66 27       	eor	r22, r22
 78c:	b0 0d       	add	r27, r0
 78e:	a1 1d       	adc	r26, r1
 790:	66 1f       	adc	r22, r22
 792:	82 9f       	mul	r24, r18
 794:	22 27       	eor	r18, r18
 796:	b0 0d       	add	r27, r0
 798:	a1 1d       	adc	r26, r1
 79a:	62 1f       	adc	r22, r18
 79c:	73 9f       	mul	r23, r19
 79e:	b0 0d       	add	r27, r0
 7a0:	a1 1d       	adc	r26, r1
 7a2:	62 1f       	adc	r22, r18
 7a4:	83 9f       	mul	r24, r19
 7a6:	a0 0d       	add	r26, r0
 7a8:	61 1d       	adc	r22, r1
 7aa:	22 1f       	adc	r18, r18
 7ac:	74 9f       	mul	r23, r20
 7ae:	33 27       	eor	r19, r19
 7b0:	a0 0d       	add	r26, r0
 7b2:	61 1d       	adc	r22, r1
 7b4:	23 1f       	adc	r18, r19
 7b6:	84 9f       	mul	r24, r20
 7b8:	60 0d       	add	r22, r0
 7ba:	21 1d       	adc	r18, r1
 7bc:	82 2f       	mov	r24, r18
 7be:	76 2f       	mov	r23, r22
 7c0:	6a 2f       	mov	r22, r26
 7c2:	11 24       	eor	r1, r1
 7c4:	9f 57       	subi	r25, 0x7F	; 127
 7c6:	50 40       	sbci	r21, 0x00	; 0
 7c8:	9a f0       	brmi	.+38     	; 0x7f0 <__mulsf3_pse+0x88>
 7ca:	f1 f0       	breq	.+60     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7cc:	88 23       	and	r24, r24
 7ce:	4a f0       	brmi	.+18     	; 0x7e2 <__mulsf3_pse+0x7a>
 7d0:	ee 0f       	add	r30, r30
 7d2:	ff 1f       	adc	r31, r31
 7d4:	bb 1f       	adc	r27, r27
 7d6:	66 1f       	adc	r22, r22
 7d8:	77 1f       	adc	r23, r23
 7da:	88 1f       	adc	r24, r24
 7dc:	91 50       	subi	r25, 0x01	; 1
 7de:	50 40       	sbci	r21, 0x00	; 0
 7e0:	a9 f7       	brne	.-22     	; 0x7cc <__mulsf3_pse+0x64>
 7e2:	9e 3f       	cpi	r25, 0xFE	; 254
 7e4:	51 05       	cpc	r21, r1
 7e6:	80 f0       	brcs	.+32     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7e8:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_inf>
 7ec:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>
 7f0:	5f 3f       	cpi	r21, 0xFF	; 255
 7f2:	e4 f3       	brlt	.-8      	; 0x7ec <__mulsf3_pse+0x84>
 7f4:	98 3e       	cpi	r25, 0xE8	; 232
 7f6:	d4 f3       	brlt	.-12     	; 0x7ec <__mulsf3_pse+0x84>
 7f8:	86 95       	lsr	r24
 7fa:	77 95       	ror	r23
 7fc:	67 95       	ror	r22
 7fe:	b7 95       	ror	r27
 800:	f7 95       	ror	r31
 802:	e7 95       	ror	r30
 804:	9f 5f       	subi	r25, 0xFF	; 255
 806:	c1 f7       	brne	.-16     	; 0x7f8 <__mulsf3_pse+0x90>
 808:	fe 2b       	or	r31, r30
 80a:	88 0f       	add	r24, r24
 80c:	91 1d       	adc	r25, r1
 80e:	96 95       	lsr	r25
 810:	87 95       	ror	r24
 812:	97 f9       	bld	r25, 7
 814:	08 95       	ret

00000816 <_exit>:
 816:	f8 94       	cli

00000818 <__stop_program>:
 818:	ff cf       	rjmp	.-2      	; 0x818 <__stop_program>
