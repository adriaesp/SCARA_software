
v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000061c  000006b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000061c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800118  00800118  000006c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c3e  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a97  00000000  00000000  000013ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c2  00000000  00000000  00001e85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00002348  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053b  00000000  00000000  0000244c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000198  00000000  00000000  00002987  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002b1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_1>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec e1       	ldi	r30, 0x1C	; 28
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a8 31       	cpi	r26, 0x18	; 24
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a8 e1       	ldi	r26, 0x18	; 24
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	af 31       	cpi	r26, 0x1F	; 31
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
  ea:	0c 94 0c 03 	jmp	0x618	; 0x618 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <int0_init>:
#define MS1 PC5

#define FC_Z PD0

void int0_init(void) {
	DDRD &= ~(1 << FC_Z);      // PD0 entrada
  f2:	8a b1       	in	r24, 0x0a	; 10
  f4:	8e 7f       	andi	r24, 0xFE	; 254
  f6:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << FC_Z);
  f8:	8b b1       	in	r24, 0x0b	; 11
  fa:	8e 7f       	andi	r24, 0xFE	; 254
  fc:	8b b9       	out	0x0b, r24	; 11

	EICRA |= (1 << ISC00);    // Interrupt on any logical change
  fe:	e9 e6       	ldi	r30, 0x69	; 105
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	81 60       	ori	r24, 0x01	; 1
 106:	80 83       	st	Z, r24
	EICRA &= ~(1 << ISC01);
 108:	80 81       	ld	r24, Z
 10a:	8d 7f       	andi	r24, 0xFD	; 253
 10c:	80 83       	st	Z, r24

	EIMSK |= (1 << INT0);     // Habilita INT0
 10e:	8d b3       	in	r24, 0x1d	; 29
 110:	81 60       	ori	r24, 0x01	; 1
 112:	8d bb       	out	0x1d, r24	; 29
 114:	08 95       	ret

00000116 <setup>:
}

void setup() {
	// Configura OC1A (PB1, pin 9 Arduino UNO) com a sortida
	DDRB |= (1 << DIR) | (1 << STEP) | (1 << EN); 
 116:	84 b1       	in	r24, 0x04	; 4
 118:	87 60       	ori	r24, 0x07	; 7
 11a:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << DIR); // Direcció = HIGH, CCKW
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<EN);  // EN = LOW -> Driver = 0n
 122:	85 b1       	in	r24, 0x05	; 5
 124:	8b 7f       	andi	r24, 0xFB	; 251
 126:	85 b9       	out	0x05, r24	; 5
	
	// Configura microsteping
	DDRC |= (1<<MS2) | (1<<MS1);
 128:	87 b1       	in	r24, 0x07	; 7
 12a:	80 63       	ori	r24, 0x30	; 48
 12c:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~((1<<MS2) | (1<<MS1)); // MS2, MS1: 00: 1/8, 01: 1/2, 10: 1/4 11: 1/16 
 12e:	88 b1       	in	r24, 0x08	; 8
 130:	8f 7c       	andi	r24, 0xCF	; 207
 132:	88 b9       	out	0x08, r24	; 8
	
	// Timer1 ? Fast PWM, TOP = ICR1, prescaler = 8
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
 134:	82 e8       	ldi	r24, 0x82	; 130
 136:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
 13a:	8a e1       	ldi	r24, 0x1A	; 26
 13c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 |= (1 << OCIE1A);  // Habilita interrupció per OCR1A
 140:	ef e6       	ldi	r30, 0x6F	; 111
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	82 60       	ori	r24, 0x02	; 2
 148:	80 83       	st	Z, r24

	ICR1 = 1999;      // TOP ? Freq = 1kHz
 14a:	8f ec       	ldi	r24, 0xCF	; 207
 14c:	97 e0       	ldi	r25, 0x07	; 7
 14e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 152:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = 999;      // 50% cicle de treball
 156:	87 ee       	ldi	r24, 0xE7	; 231
 158:	93 e0       	ldi	r25, 0x03	; 3
 15a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 15e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	sei();
 162:	78 94       	sei
 164:	08 95       	ret

00000166 <calcula_pasos>:
}


int calcula_pasos(float graus)
{
	return (int)(1600.0 *( graus / 360.0));
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	44 eb       	ldi	r20, 0xB4	; 180
 16c:	53 e4       	ldi	r21, 0x43	; 67
 16e:	0e 94 a6 01 	call	0x34c	; 0x34c <__divsf3>
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	48 ec       	ldi	r20, 0xC8	; 200
 178:	54 e4       	ldi	r21, 0x44	; 68
 17a:	0e 94 9f 02 	call	0x53e	; 0x53e <__mulsf3>
 17e:	0e 94 18 02 	call	0x430	; 0x430 <__fixsfsi>
}
 182:	cb 01       	movw	r24, r22
 184:	08 95       	ret

00000186 <__vector_11>:

ISR(TIMER1_COMPA_vect) {		
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
	step_count++;
 19c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <step_count>
 1a0:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <step_count+0x1>
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <step_count+0x1>
 1aa:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <step_count>
	if (step_count >= movs[mov_index].passos) {
 1ae:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mov_index>
 1b2:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <mov_index+0x1>
 1b6:	fc 01       	movw	r30, r24
 1b8:	ee 0f       	add	r30, r30
 1ba:	ff 1f       	adc	r31, r31
 1bc:	e8 0f       	add	r30, r24
 1be:	f9 1f       	adc	r31, r25
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	e0 50       	subi	r30, 0x00	; 0
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	24 81       	ldd	r18, Z+4	; 0x04
 1ca:	35 81       	ldd	r19, Z+5	; 0x05
 1cc:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <step_count>
 1d0:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <step_count+0x1>
 1d4:	82 17       	cp	r24, r18
 1d6:	93 07       	cpc	r25, r19
 1d8:	1c f0       	brlt	.+6      	; 0x1e0 <__vector_11+0x5a>
		MOV = 1;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	}
}
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <__vector_1>:

ISR(INT0_vect) {
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	8f 93       	push	r24
	if (MOV != 4){
 202:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 206:	84 30       	cpi	r24, 0x04	; 4
 208:	19 f0       	breq	.+6      	; 0x210 <__vector_1+0x1a>
		MOV = 3;	
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	}

}
 210:	8f 91       	pop	r24
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <main>:

int main(void) {
	
	// Precalcula els passos per cada moviment
	for (int i = 0; i < MAX_MOVES; i++) {
 21c:	00 e0       	ldi	r16, 0x00	; 0
 21e:	10 e0       	ldi	r17, 0x00	; 0
 220:	13 c0       	rjmp	.+38     	; 0x248 <main+0x2c>
		movs[i].passos = calcula_pasos(movs[i].graus);
 222:	e8 01       	movw	r28, r16
 224:	cc 0f       	add	r28, r28
 226:	dd 1f       	adc	r29, r29
 228:	c0 0f       	add	r28, r16
 22a:	d1 1f       	adc	r29, r17
 22c:	cc 0f       	add	r28, r28
 22e:	dd 1f       	adc	r29, r29
 230:	c0 50       	subi	r28, 0x00	; 0
 232:	df 4f       	sbci	r29, 0xFF	; 255
 234:	68 81       	ld	r22, Y
 236:	79 81       	ldd	r23, Y+1	; 0x01
 238:	8a 81       	ldd	r24, Y+2	; 0x02
 23a:	9b 81       	ldd	r25, Y+3	; 0x03
 23c:	0e 94 b3 00 	call	0x166	; 0x166 <calcula_pasos>
 240:	9d 83       	std	Y+5, r25	; 0x05
 242:	8c 83       	std	Y+4, r24	; 0x04
}

int main(void) {
	
	// Precalcula els passos per cada moviment
	for (int i = 0; i < MAX_MOVES; i++) {
 244:	0f 5f       	subi	r16, 0xFF	; 255
 246:	1f 4f       	sbci	r17, 0xFF	; 255
 248:	04 30       	cpi	r16, 0x04	; 4
 24a:	11 05       	cpc	r17, r1
 24c:	50 f3       	brcs	.-44     	; 0x222 <main+0x6>
		movs[i].passos = calcula_pasos(movs[i].graus);
	}
	
	int0_init();
 24e:	0e 94 79 00 	call	0xf2	; 0xf2 <int0_init>
	timer0_init();
 252:	0e 94 6f 01 	call	0x2de	; 0x2de <timer0_init>
	setup();
 256:	0e 94 8b 00 	call	0x116	; 0x116 <setup>

while (1) {
	switch (MOV) {
 25a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	e1 f0       	breq	.+56     	; 0x29a <main+0x7e>
 262:	83 30       	cpi	r24, 0x03	; 3
 264:	a1 f1       	breq	.+104    	; 0x2ce <main+0xb2>
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	c1 f7       	brne	.-16     	; 0x25a <main+0x3e>
		case 0:
		// En moviment
		break;

		case 1:
		TCCR1A &= ~(1<<COM1A1); // Atura PWM
 26a:	e0 e8       	ldi	r30, 0x80	; 128
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	8f 77       	andi	r24, 0x7F	; 127
 272:	80 83       	st	Z, r24
		if (delay_ms(1000))
 274:	88 ee       	ldi	r24, 0xE8	; 232
 276:	93 e0       	ldi	r25, 0x03	; 3
 278:	0e 94 93 01 	call	0x326	; 0x326 <delay_ms>
 27c:	88 23       	and	r24, r24
 27e:	69 f3       	breq	.-38     	; 0x25a <main+0x3e>
		{
			mov_index++;
 280:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mov_index>
 284:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <mov_index+0x1>
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <mov_index+0x1>
 28e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <mov_index>
			MOV = 2;
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 298:	e0 cf       	rjmp	.-64     	; 0x25a <main+0x3e>
		}

		break;

		case 2:	
		if (mov_index < MAX_MOVES) {
 29a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mov_index>
 29e:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <mov_index+0x1>
 2a2:	04 97       	sbiw	r24, 0x04	; 4
 2a4:	80 f4       	brcc	.+32     	; 0x2c6 <main+0xaa>
			step_count = 0;
 2a6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <step_count+0x1>
 2aa:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <step_count>
			TCNT1 = 0;
 2ae:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 2b2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			TCCR1A |= (1 << COM1A1); // Reactiva PWM
 2b6:	e0 e8       	ldi	r30, 0x80	; 128
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	80 68       	ori	r24, 0x80	; 128
 2be:	80 83       	st	Z, r24
			MOV = 0;
 2c0:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
 2c4:	ca cf       	rjmp	.-108    	; 0x25a <main+0x3e>
			} else { 
			// Hem acabat
			MOV = 4;
 2c6:	84 e0       	ldi	r24, 0x04	; 4
 2c8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 2cc:	c6 cf       	rjmp	.-116    	; 0x25a <main+0x3e>
			//PORTB |= (1 << EN); // Desactiva driver si vols
		}
		break;
		
		case 3: // Final de carrera detectat
		if (PIND & !(1 << FC_Z)) {      // PD0 és LOW -> botó no premut
 2ce:	89 b1       	in	r24, 0x09	; 9
			TCCR1A &= ~(1<<COM1A1);		// Atura PWM

			}else{
			DDRB &= ~(1 << DIR);
 2d0:	84 b1       	in	r24, 0x04	; 4
 2d2:	8e 7f       	andi	r24, 0xFE	; 254
 2d4:	84 b9       	out	0x04, r24	; 4
			MOV = 2;
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 2dc:	be cf       	rjmp	.-132    	; 0x25a <main+0x3e>

000002de <timer0_init>:

volatile uint16_t timer0_millis = 0;

void timer0_init(void) {
	// Mode CTC
	TCCR0A = (1 << WGM01);                  // Mode CTC (WGM01 = 1)
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);     // Prescaler = 64
 2e2:	83 e0       	ldi	r24, 0x03	; 3
 2e4:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;                            // 1 ms amb F_CPU = 16 MHz i prescaler 64
 2e6:	89 ef       	ldi	r24, 0xF9	; 249
 2e8:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);                // Activa interrupció per Compare Match A
 2ea:	ee e6       	ldi	r30, 0x6E	; 110
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	82 60       	ori	r24, 0x02	; 2
 2f2:	80 83       	st	Z, r24
	sei();                                  // Activa interrupcions globals
 2f4:	78 94       	sei
 2f6:	08 95       	ret

000002f8 <__vector_14>:
}

ISR(TIMER0_COMPA_vect) {
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
	timer0_millis++; // S'incrementa cada 1 ms
 306:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <timer0_millis>
 30a:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <timer0_millis+0x1>
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <timer0_millis+0x1>
 314:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <timer0_millis>
}
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <delay_ms>:

bool delay_ms(uint16_t ms) {
	uint16_t start = timer0_millis;
 326:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <timer0_millis>
 32a:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <timer0_millis+0x1>
	if ((uint16_t)(timer0_millis) >= ms) {
 32e:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <timer0_millis>
 332:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <timer0_millis+0x1>
 336:	28 17       	cp	r18, r24
 338:	39 07       	cpc	r19, r25
 33a:	30 f0       	brcs	.+12     	; 0x348 <delay_ms+0x22>
		timer0_millis = 0;
 33c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <timer0_millis+0x1>
 340:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <timer0_millis>
		return true;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	08 95       	ret
	}
	return false;
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	08 95       	ret

0000034c <__divsf3>:
 34c:	0e 94 ba 01 	call	0x374	; 0x374 <__divsf3x>
 350:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__fp_round>
 354:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__fp_pscB>
 358:	58 f0       	brcs	.+22     	; 0x370 <__divsf3+0x24>
 35a:	0e 94 57 02 	call	0x4ae	; 0x4ae <__fp_pscA>
 35e:	40 f0       	brcs	.+16     	; 0x370 <__divsf3+0x24>
 360:	29 f4       	brne	.+10     	; 0x36c <__divsf3+0x20>
 362:	5f 3f       	cpi	r21, 0xFF	; 255
 364:	29 f0       	breq	.+10     	; 0x370 <__divsf3+0x24>
 366:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__fp_inf>
 36a:	51 11       	cpse	r21, r1
 36c:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_szero>
 370:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__fp_nan>

00000374 <__divsf3x>:
 374:	0e 94 76 02 	call	0x4ec	; 0x4ec <__fp_split3>
 378:	68 f3       	brcs	.-38     	; 0x354 <__divsf3+0x8>

0000037a <__divsf3_pse>:
 37a:	99 23       	and	r25, r25
 37c:	b1 f3       	breq	.-20     	; 0x36a <__divsf3+0x1e>
 37e:	55 23       	and	r21, r21
 380:	91 f3       	breq	.-28     	; 0x366 <__divsf3+0x1a>
 382:	95 1b       	sub	r25, r21
 384:	55 0b       	sbc	r21, r21
 386:	bb 27       	eor	r27, r27
 388:	aa 27       	eor	r26, r26
 38a:	62 17       	cp	r22, r18
 38c:	73 07       	cpc	r23, r19
 38e:	84 07       	cpc	r24, r20
 390:	38 f0       	brcs	.+14     	; 0x3a0 <__divsf3_pse+0x26>
 392:	9f 5f       	subi	r25, 0xFF	; 255
 394:	5f 4f       	sbci	r21, 0xFF	; 255
 396:	22 0f       	add	r18, r18
 398:	33 1f       	adc	r19, r19
 39a:	44 1f       	adc	r20, r20
 39c:	aa 1f       	adc	r26, r26
 39e:	a9 f3       	breq	.-22     	; 0x38a <__divsf3_pse+0x10>
 3a0:	35 d0       	rcall	.+106    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3a2:	0e 2e       	mov	r0, r30
 3a4:	3a f0       	brmi	.+14     	; 0x3b4 <__divsf3_pse+0x3a>
 3a6:	e0 e8       	ldi	r30, 0x80	; 128
 3a8:	32 d0       	rcall	.+100    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3aa:	91 50       	subi	r25, 0x01	; 1
 3ac:	50 40       	sbci	r21, 0x00	; 0
 3ae:	e6 95       	lsr	r30
 3b0:	00 1c       	adc	r0, r0
 3b2:	ca f7       	brpl	.-14     	; 0x3a6 <__divsf3_pse+0x2c>
 3b4:	2b d0       	rcall	.+86     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3b6:	fe 2f       	mov	r31, r30
 3b8:	29 d0       	rcall	.+82     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3ba:	66 0f       	add	r22, r22
 3bc:	77 1f       	adc	r23, r23
 3be:	88 1f       	adc	r24, r24
 3c0:	bb 1f       	adc	r27, r27
 3c2:	26 17       	cp	r18, r22
 3c4:	37 07       	cpc	r19, r23
 3c6:	48 07       	cpc	r20, r24
 3c8:	ab 07       	cpc	r26, r27
 3ca:	b0 e8       	ldi	r27, 0x80	; 128
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <__divsf3_pse+0x56>
 3ce:	bb 0b       	sbc	r27, r27
 3d0:	80 2d       	mov	r24, r0
 3d2:	bf 01       	movw	r22, r30
 3d4:	ff 27       	eor	r31, r31
 3d6:	93 58       	subi	r25, 0x83	; 131
 3d8:	5f 4f       	sbci	r21, 0xFF	; 255
 3da:	3a f0       	brmi	.+14     	; 0x3ea <__divsf3_pse+0x70>
 3dc:	9e 3f       	cpi	r25, 0xFE	; 254
 3de:	51 05       	cpc	r21, r1
 3e0:	78 f0       	brcs	.+30     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3e2:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__fp_inf>
 3e6:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_szero>
 3ea:	5f 3f       	cpi	r21, 0xFF	; 255
 3ec:	e4 f3       	brlt	.-8      	; 0x3e6 <__divsf3_pse+0x6c>
 3ee:	98 3e       	cpi	r25, 0xE8	; 232
 3f0:	d4 f3       	brlt	.-12     	; 0x3e6 <__divsf3_pse+0x6c>
 3f2:	86 95       	lsr	r24
 3f4:	77 95       	ror	r23
 3f6:	67 95       	ror	r22
 3f8:	b7 95       	ror	r27
 3fa:	f7 95       	ror	r31
 3fc:	9f 5f       	subi	r25, 0xFF	; 255
 3fe:	c9 f7       	brne	.-14     	; 0x3f2 <__divsf3_pse+0x78>
 400:	88 0f       	add	r24, r24
 402:	91 1d       	adc	r25, r1
 404:	96 95       	lsr	r25
 406:	87 95       	ror	r24
 408:	97 f9       	bld	r25, 7
 40a:	08 95       	ret
 40c:	e1 e0       	ldi	r30, 0x01	; 1
 40e:	66 0f       	add	r22, r22
 410:	77 1f       	adc	r23, r23
 412:	88 1f       	adc	r24, r24
 414:	bb 1f       	adc	r27, r27
 416:	62 17       	cp	r22, r18
 418:	73 07       	cpc	r23, r19
 41a:	84 07       	cpc	r24, r20
 41c:	ba 07       	cpc	r27, r26
 41e:	20 f0       	brcs	.+8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 420:	62 1b       	sub	r22, r18
 422:	73 0b       	sbc	r23, r19
 424:	84 0b       	sbc	r24, r20
 426:	ba 0b       	sbc	r27, r26
 428:	ee 1f       	adc	r30, r30
 42a:	88 f7       	brcc	.-30     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 42c:	e0 95       	com	r30
 42e:	08 95       	ret

00000430 <__fixsfsi>:
 430:	0e 94 1f 02 	call	0x43e	; 0x43e <__fixunssfsi>
 434:	68 94       	set
 436:	b1 11       	cpse	r27, r1
 438:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_szero>
 43c:	08 95       	ret

0000043e <__fixunssfsi>:
 43e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__fp_splitA>
 442:	88 f0       	brcs	.+34     	; 0x466 <__fixunssfsi+0x28>
 444:	9f 57       	subi	r25, 0x7F	; 127
 446:	98 f0       	brcs	.+38     	; 0x46e <__fixunssfsi+0x30>
 448:	b9 2f       	mov	r27, r25
 44a:	99 27       	eor	r25, r25
 44c:	b7 51       	subi	r27, 0x17	; 23
 44e:	b0 f0       	brcs	.+44     	; 0x47c <__fixunssfsi+0x3e>
 450:	e1 f0       	breq	.+56     	; 0x48a <__fixunssfsi+0x4c>
 452:	66 0f       	add	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	88 1f       	adc	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	1a f0       	brmi	.+6      	; 0x462 <__fixunssfsi+0x24>
 45c:	ba 95       	dec	r27
 45e:	c9 f7       	brne	.-14     	; 0x452 <__fixunssfsi+0x14>
 460:	14 c0       	rjmp	.+40     	; 0x48a <__fixunssfsi+0x4c>
 462:	b1 30       	cpi	r27, 0x01	; 1
 464:	91 f0       	breq	.+36     	; 0x48a <__fixunssfsi+0x4c>
 466:	0e 94 98 02 	call	0x530	; 0x530 <__fp_zero>
 46a:	b1 e0       	ldi	r27, 0x01	; 1
 46c:	08 95       	ret
 46e:	0c 94 98 02 	jmp	0x530	; 0x530 <__fp_zero>
 472:	67 2f       	mov	r22, r23
 474:	78 2f       	mov	r23, r24
 476:	88 27       	eor	r24, r24
 478:	b8 5f       	subi	r27, 0xF8	; 248
 47a:	39 f0       	breq	.+14     	; 0x48a <__fixunssfsi+0x4c>
 47c:	b9 3f       	cpi	r27, 0xF9	; 249
 47e:	cc f3       	brlt	.-14     	; 0x472 <__fixunssfsi+0x34>
 480:	86 95       	lsr	r24
 482:	77 95       	ror	r23
 484:	67 95       	ror	r22
 486:	b3 95       	inc	r27
 488:	d9 f7       	brne	.-10     	; 0x480 <__fixunssfsi+0x42>
 48a:	3e f4       	brtc	.+14     	; 0x49a <__fixunssfsi+0x5c>
 48c:	90 95       	com	r25
 48e:	80 95       	com	r24
 490:	70 95       	com	r23
 492:	61 95       	neg	r22
 494:	7f 4f       	sbci	r23, 0xFF	; 255
 496:	8f 4f       	sbci	r24, 0xFF	; 255
 498:	9f 4f       	sbci	r25, 0xFF	; 255
 49a:	08 95       	ret

0000049c <__fp_inf>:
 49c:	97 f9       	bld	r25, 7
 49e:	9f 67       	ori	r25, 0x7F	; 127
 4a0:	80 e8       	ldi	r24, 0x80	; 128
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	08 95       	ret

000004a8 <__fp_nan>:
 4a8:	9f ef       	ldi	r25, 0xFF	; 255
 4aa:	80 ec       	ldi	r24, 0xC0	; 192
 4ac:	08 95       	ret

000004ae <__fp_pscA>:
 4ae:	00 24       	eor	r0, r0
 4b0:	0a 94       	dec	r0
 4b2:	16 16       	cp	r1, r22
 4b4:	17 06       	cpc	r1, r23
 4b6:	18 06       	cpc	r1, r24
 4b8:	09 06       	cpc	r0, r25
 4ba:	08 95       	ret

000004bc <__fp_pscB>:
 4bc:	00 24       	eor	r0, r0
 4be:	0a 94       	dec	r0
 4c0:	12 16       	cp	r1, r18
 4c2:	13 06       	cpc	r1, r19
 4c4:	14 06       	cpc	r1, r20
 4c6:	05 06       	cpc	r0, r21
 4c8:	08 95       	ret

000004ca <__fp_round>:
 4ca:	09 2e       	mov	r0, r25
 4cc:	03 94       	inc	r0
 4ce:	00 0c       	add	r0, r0
 4d0:	11 f4       	brne	.+4      	; 0x4d6 <__fp_round+0xc>
 4d2:	88 23       	and	r24, r24
 4d4:	52 f0       	brmi	.+20     	; 0x4ea <__fp_round+0x20>
 4d6:	bb 0f       	add	r27, r27
 4d8:	40 f4       	brcc	.+16     	; 0x4ea <__fp_round+0x20>
 4da:	bf 2b       	or	r27, r31
 4dc:	11 f4       	brne	.+4      	; 0x4e2 <__fp_round+0x18>
 4de:	60 ff       	sbrs	r22, 0
 4e0:	04 c0       	rjmp	.+8      	; 0x4ea <__fp_round+0x20>
 4e2:	6f 5f       	subi	r22, 0xFF	; 255
 4e4:	7f 4f       	sbci	r23, 0xFF	; 255
 4e6:	8f 4f       	sbci	r24, 0xFF	; 255
 4e8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ea:	08 95       	ret

000004ec <__fp_split3>:
 4ec:	57 fd       	sbrc	r21, 7
 4ee:	90 58       	subi	r25, 0x80	; 128
 4f0:	44 0f       	add	r20, r20
 4f2:	55 1f       	adc	r21, r21
 4f4:	59 f0       	breq	.+22     	; 0x50c <__fp_splitA+0x10>
 4f6:	5f 3f       	cpi	r21, 0xFF	; 255
 4f8:	71 f0       	breq	.+28     	; 0x516 <__fp_splitA+0x1a>
 4fa:	47 95       	ror	r20

000004fc <__fp_splitA>:
 4fc:	88 0f       	add	r24, r24
 4fe:	97 fb       	bst	r25, 7
 500:	99 1f       	adc	r25, r25
 502:	61 f0       	breq	.+24     	; 0x51c <__fp_splitA+0x20>
 504:	9f 3f       	cpi	r25, 0xFF	; 255
 506:	79 f0       	breq	.+30     	; 0x526 <__fp_splitA+0x2a>
 508:	87 95       	ror	r24
 50a:	08 95       	ret
 50c:	12 16       	cp	r1, r18
 50e:	13 06       	cpc	r1, r19
 510:	14 06       	cpc	r1, r20
 512:	55 1f       	adc	r21, r21
 514:	f2 cf       	rjmp	.-28     	; 0x4fa <__fp_split3+0xe>
 516:	46 95       	lsr	r20
 518:	f1 df       	rcall	.-30     	; 0x4fc <__fp_splitA>
 51a:	08 c0       	rjmp	.+16     	; 0x52c <__fp_splitA+0x30>
 51c:	16 16       	cp	r1, r22
 51e:	17 06       	cpc	r1, r23
 520:	18 06       	cpc	r1, r24
 522:	99 1f       	adc	r25, r25
 524:	f1 cf       	rjmp	.-30     	; 0x508 <__fp_splitA+0xc>
 526:	86 95       	lsr	r24
 528:	71 05       	cpc	r23, r1
 52a:	61 05       	cpc	r22, r1
 52c:	08 94       	sec
 52e:	08 95       	ret

00000530 <__fp_zero>:
 530:	e8 94       	clt

00000532 <__fp_szero>:
 532:	bb 27       	eor	r27, r27
 534:	66 27       	eor	r22, r22
 536:	77 27       	eor	r23, r23
 538:	cb 01       	movw	r24, r22
 53a:	97 f9       	bld	r25, 7
 53c:	08 95       	ret

0000053e <__mulsf3>:
 53e:	0e 94 b2 02 	call	0x564	; 0x564 <__mulsf3x>
 542:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__fp_round>
 546:	0e 94 57 02 	call	0x4ae	; 0x4ae <__fp_pscA>
 54a:	38 f0       	brcs	.+14     	; 0x55a <__mulsf3+0x1c>
 54c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__fp_pscB>
 550:	20 f0       	brcs	.+8      	; 0x55a <__mulsf3+0x1c>
 552:	95 23       	and	r25, r21
 554:	11 f0       	breq	.+4      	; 0x55a <__mulsf3+0x1c>
 556:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__fp_inf>
 55a:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__fp_nan>
 55e:	11 24       	eor	r1, r1
 560:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_szero>

00000564 <__mulsf3x>:
 564:	0e 94 76 02 	call	0x4ec	; 0x4ec <__fp_split3>
 568:	70 f3       	brcs	.-36     	; 0x546 <__mulsf3+0x8>

0000056a <__mulsf3_pse>:
 56a:	95 9f       	mul	r25, r21
 56c:	c1 f3       	breq	.-16     	; 0x55e <__mulsf3+0x20>
 56e:	95 0f       	add	r25, r21
 570:	50 e0       	ldi	r21, 0x00	; 0
 572:	55 1f       	adc	r21, r21
 574:	62 9f       	mul	r22, r18
 576:	f0 01       	movw	r30, r0
 578:	72 9f       	mul	r23, r18
 57a:	bb 27       	eor	r27, r27
 57c:	f0 0d       	add	r31, r0
 57e:	b1 1d       	adc	r27, r1
 580:	63 9f       	mul	r22, r19
 582:	aa 27       	eor	r26, r26
 584:	f0 0d       	add	r31, r0
 586:	b1 1d       	adc	r27, r1
 588:	aa 1f       	adc	r26, r26
 58a:	64 9f       	mul	r22, r20
 58c:	66 27       	eor	r22, r22
 58e:	b0 0d       	add	r27, r0
 590:	a1 1d       	adc	r26, r1
 592:	66 1f       	adc	r22, r22
 594:	82 9f       	mul	r24, r18
 596:	22 27       	eor	r18, r18
 598:	b0 0d       	add	r27, r0
 59a:	a1 1d       	adc	r26, r1
 59c:	62 1f       	adc	r22, r18
 59e:	73 9f       	mul	r23, r19
 5a0:	b0 0d       	add	r27, r0
 5a2:	a1 1d       	adc	r26, r1
 5a4:	62 1f       	adc	r22, r18
 5a6:	83 9f       	mul	r24, r19
 5a8:	a0 0d       	add	r26, r0
 5aa:	61 1d       	adc	r22, r1
 5ac:	22 1f       	adc	r18, r18
 5ae:	74 9f       	mul	r23, r20
 5b0:	33 27       	eor	r19, r19
 5b2:	a0 0d       	add	r26, r0
 5b4:	61 1d       	adc	r22, r1
 5b6:	23 1f       	adc	r18, r19
 5b8:	84 9f       	mul	r24, r20
 5ba:	60 0d       	add	r22, r0
 5bc:	21 1d       	adc	r18, r1
 5be:	82 2f       	mov	r24, r18
 5c0:	76 2f       	mov	r23, r22
 5c2:	6a 2f       	mov	r22, r26
 5c4:	11 24       	eor	r1, r1
 5c6:	9f 57       	subi	r25, 0x7F	; 127
 5c8:	50 40       	sbci	r21, 0x00	; 0
 5ca:	9a f0       	brmi	.+38     	; 0x5f2 <__mulsf3_pse+0x88>
 5cc:	f1 f0       	breq	.+60     	; 0x60a <__mulsf3_pse+0xa0>
 5ce:	88 23       	and	r24, r24
 5d0:	4a f0       	brmi	.+18     	; 0x5e4 <__mulsf3_pse+0x7a>
 5d2:	ee 0f       	add	r30, r30
 5d4:	ff 1f       	adc	r31, r31
 5d6:	bb 1f       	adc	r27, r27
 5d8:	66 1f       	adc	r22, r22
 5da:	77 1f       	adc	r23, r23
 5dc:	88 1f       	adc	r24, r24
 5de:	91 50       	subi	r25, 0x01	; 1
 5e0:	50 40       	sbci	r21, 0x00	; 0
 5e2:	a9 f7       	brne	.-22     	; 0x5ce <__mulsf3_pse+0x64>
 5e4:	9e 3f       	cpi	r25, 0xFE	; 254
 5e6:	51 05       	cpc	r21, r1
 5e8:	80 f0       	brcs	.+32     	; 0x60a <__mulsf3_pse+0xa0>
 5ea:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__fp_inf>
 5ee:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_szero>
 5f2:	5f 3f       	cpi	r21, 0xFF	; 255
 5f4:	e4 f3       	brlt	.-8      	; 0x5ee <__mulsf3_pse+0x84>
 5f6:	98 3e       	cpi	r25, 0xE8	; 232
 5f8:	d4 f3       	brlt	.-12     	; 0x5ee <__mulsf3_pse+0x84>
 5fa:	86 95       	lsr	r24
 5fc:	77 95       	ror	r23
 5fe:	67 95       	ror	r22
 600:	b7 95       	ror	r27
 602:	f7 95       	ror	r31
 604:	e7 95       	ror	r30
 606:	9f 5f       	subi	r25, 0xFF	; 255
 608:	c1 f7       	brne	.-16     	; 0x5fa <__mulsf3_pse+0x90>
 60a:	fe 2b       	or	r31, r30
 60c:	88 0f       	add	r24, r24
 60e:	91 1d       	adc	r25, r1
 610:	96 95       	lsr	r25
 612:	87 95       	ror	r24
 614:	97 f9       	bld	r25, 7
 616:	08 95       	ret

00000618 <_exit>:
 618:	f8 94       	cli

0000061a <__stop_program>:
 61a:	ff cf       	rjmp	.-2      	; 0x61a <__stop_program>
